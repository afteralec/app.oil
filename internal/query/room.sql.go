// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: room.sql

package query

import (
	"context"
	"database/sql"
	"strings"
)

const createRoom = `-- name: CreateRoom :execresult
INSERT INTO rooms (title, description, size) VALUES (?, ?, ?)
`

type CreateRoomParams struct {
	Title       string
	Description string
	Size        int32
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (sql.Result, error) {
	return q.exec(ctx, q.createRoomStmt, createRoom, arg.Title, arg.Description, arg.Size)
}

const getRoom = `-- name: GetRoom :one
SELECT created_at, updated_at, description, title, north, northeast, east, southeast, south, southwest, west, northwest, id, size, unmodified FROM rooms WHERE id = ?
`

func (q *Queries) GetRoom(ctx context.Context, id int64) (Room, error) {
	row := q.queryRow(ctx, q.getRoomStmt, getRoom, id)
	var i Room
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Title,
		&i.North,
		&i.Northeast,
		&i.East,
		&i.Southeast,
		&i.South,
		&i.Southwest,
		&i.West,
		&i.Northwest,
		&i.ID,
		&i.Size,
		&i.Unmodified,
	)
	return i, err
}

const listRooms = `-- name: ListRooms :many
SELECT created_at, updated_at, description, title, north, northeast, east, southeast, south, southwest, west, northwest, id, size, unmodified FROM rooms
`

func (q *Queries) ListRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.query(ctx, q.listRoomsStmt, listRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.Title,
			&i.North,
			&i.Northeast,
			&i.East,
			&i.Southeast,
			&i.South,
			&i.Southwest,
			&i.West,
			&i.Northwest,
			&i.ID,
			&i.Size,
			&i.Unmodified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoomsByIDs = `-- name: ListRoomsByIDs :many
SELECT created_at, updated_at, description, title, north, northeast, east, southeast, south, southwest, west, northwest, id, size, unmodified FROM rooms WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) ListRoomsByIDs(ctx context.Context, ids []int64) ([]Room, error) {
	query := listRoomsByIDs
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.Title,
			&i.North,
			&i.Northeast,
			&i.East,
			&i.Southeast,
			&i.South,
			&i.Southwest,
			&i.West,
			&i.Northwest,
			&i.ID,
			&i.Size,
			&i.Unmodified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoom = `-- name: UpdateRoom :exec
UPDATE
  rooms
SET
  title = ?,
  description = ?,
  size = ?,
  unmodified = false
WHERE
  id = ?
`

type UpdateRoomParams struct {
	Title       string
	Description string
	Size        int32
	ID          int64
}

func (q *Queries) UpdateRoom(ctx context.Context, arg UpdateRoomParams) error {
	_, err := q.exec(ctx, q.updateRoomStmt, updateRoom,
		arg.Title,
		arg.Description,
		arg.Size,
		arg.ID,
	)
	return err
}

const updateRoomDescription = `-- name: UpdateRoomDescription :exec
UPDATE rooms SET description = ?, unmodified = false WHERE id = ?
`

type UpdateRoomDescriptionParams struct {
	Description string
	ID          int64
}

func (q *Queries) UpdateRoomDescription(ctx context.Context, arg UpdateRoomDescriptionParams) error {
	_, err := q.exec(ctx, q.updateRoomDescriptionStmt, updateRoomDescription, arg.Description, arg.ID)
	return err
}

const updateRoomExitEast = `-- name: UpdateRoomExitEast :exec
UPDATE rooms SET east = ? WHERE id = ?
`

type UpdateRoomExitEastParams struct {
	East int64
	ID   int64
}

func (q *Queries) UpdateRoomExitEast(ctx context.Context, arg UpdateRoomExitEastParams) error {
	_, err := q.exec(ctx, q.updateRoomExitEastStmt, updateRoomExitEast, arg.East, arg.ID)
	return err
}

const updateRoomExitNorth = `-- name: UpdateRoomExitNorth :exec
UPDATE rooms SET north = ? WHERE id = ?
`

type UpdateRoomExitNorthParams struct {
	North int64
	ID    int64
}

func (q *Queries) UpdateRoomExitNorth(ctx context.Context, arg UpdateRoomExitNorthParams) error {
	_, err := q.exec(ctx, q.updateRoomExitNorthStmt, updateRoomExitNorth, arg.North, arg.ID)
	return err
}

const updateRoomExitNortheast = `-- name: UpdateRoomExitNortheast :exec
UPDATE rooms SET northeast = ? WHERE id = ?
`

type UpdateRoomExitNortheastParams struct {
	Northeast int64
	ID        int64
}

func (q *Queries) UpdateRoomExitNortheast(ctx context.Context, arg UpdateRoomExitNortheastParams) error {
	_, err := q.exec(ctx, q.updateRoomExitNortheastStmt, updateRoomExitNortheast, arg.Northeast, arg.ID)
	return err
}

const updateRoomExitNorthwest = `-- name: UpdateRoomExitNorthwest :exec
UPDATE rooms SET northwest = ? WHERE id = ?
`

type UpdateRoomExitNorthwestParams struct {
	Northwest int64
	ID        int64
}

func (q *Queries) UpdateRoomExitNorthwest(ctx context.Context, arg UpdateRoomExitNorthwestParams) error {
	_, err := q.exec(ctx, q.updateRoomExitNorthwestStmt, updateRoomExitNorthwest, arg.Northwest, arg.ID)
	return err
}

const updateRoomExitSouth = `-- name: UpdateRoomExitSouth :exec
UPDATE rooms SET south = ? WHERE id = ?
`

type UpdateRoomExitSouthParams struct {
	South int64
	ID    int64
}

func (q *Queries) UpdateRoomExitSouth(ctx context.Context, arg UpdateRoomExitSouthParams) error {
	_, err := q.exec(ctx, q.updateRoomExitSouthStmt, updateRoomExitSouth, arg.South, arg.ID)
	return err
}

const updateRoomExitSoutheast = `-- name: UpdateRoomExitSoutheast :exec
UPDATE rooms SET southeast = ? WHERE id = ?
`

type UpdateRoomExitSoutheastParams struct {
	Southeast int64
	ID        int64
}

func (q *Queries) UpdateRoomExitSoutheast(ctx context.Context, arg UpdateRoomExitSoutheastParams) error {
	_, err := q.exec(ctx, q.updateRoomExitSoutheastStmt, updateRoomExitSoutheast, arg.Southeast, arg.ID)
	return err
}

const updateRoomExitSouthwest = `-- name: UpdateRoomExitSouthwest :exec
UPDATE rooms SET southwest = ? WHERE id = ?
`

type UpdateRoomExitSouthwestParams struct {
	Southwest int64
	ID        int64
}

func (q *Queries) UpdateRoomExitSouthwest(ctx context.Context, arg UpdateRoomExitSouthwestParams) error {
	_, err := q.exec(ctx, q.updateRoomExitSouthwestStmt, updateRoomExitSouthwest, arg.Southwest, arg.ID)
	return err
}

const updateRoomExitWest = `-- name: UpdateRoomExitWest :exec
UPDATE rooms SET west = ? WHERE id = ?
`

type UpdateRoomExitWestParams struct {
	West int64
	ID   int64
}

func (q *Queries) UpdateRoomExitWest(ctx context.Context, arg UpdateRoomExitWestParams) error {
	_, err := q.exec(ctx, q.updateRoomExitWestStmt, updateRoomExitWest, arg.West, arg.ID)
	return err
}

const updateRoomSize = `-- name: UpdateRoomSize :exec
UPDATE rooms SET size = ? WHERE id = ?
`

type UpdateRoomSizeParams struct {
	Size int32
	ID   int64
}

func (q *Queries) UpdateRoomSize(ctx context.Context, arg UpdateRoomSizeParams) error {
	_, err := q.exec(ctx, q.updateRoomSizeStmt, updateRoomSize, arg.Size, arg.ID)
	return err
}

const updateRoomTitle = `-- name: UpdateRoomTitle :exec
UPDATE rooms SET title = ?, unmodified = false WHERE id = ?
`

type UpdateRoomTitleParams struct {
	Title string
	ID    int64
}

func (q *Queries) UpdateRoomTitle(ctx context.Context, arg UpdateRoomTitleParams) error {
	_, err := q.exec(ctx, q.updateRoomTitleStmt, updateRoomTitle, arg.Title, arg.ID)
	return err
}
