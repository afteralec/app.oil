// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0

package query

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.batchCreateRequestChangeRequestStmt, err = db.PrepareContext(ctx, batchCreateRequestChangeRequest); err != nil {
		return nil, fmt.Errorf("error preparing query BatchCreateRequestChangeRequest: %w", err)
	}
	if q.batchDeleteOpenRequestChangeRequestStmt, err = db.PrepareContext(ctx, batchDeleteOpenRequestChangeRequest); err != nil {
		return nil, fmt.Errorf("error preparing query BatchDeleteOpenRequestChangeRequest: %w", err)
	}
	if q.countCurrentActorImagePlayerPropertiesForPlayerStmt, err = db.PrepareContext(ctx, countCurrentActorImagePlayerPropertiesForPlayer); err != nil {
		return nil, fmt.Errorf("error preparing query CountCurrentActorImagePlayerPropertiesForPlayer: %w", err)
	}
	if q.countEmailsStmt, err = db.PrepareContext(ctx, countEmails); err != nil {
		return nil, fmt.Errorf("error preparing query CountEmails: %w", err)
	}
	if q.countOpenRequestChangeRequestsForRequestStmt, err = db.PrepareContext(ctx, countOpenRequestChangeRequestsForRequest); err != nil {
		return nil, fmt.Errorf("error preparing query CountOpenRequestChangeRequestsForRequest: %w", err)
	}
	if q.createActorImageStmt, err = db.PrepareContext(ctx, createActorImage); err != nil {
		return nil, fmt.Errorf("error preparing query CreateActorImage: %w", err)
	}
	if q.createActorImageCanStmt, err = db.PrepareContext(ctx, createActorImageCan); err != nil {
		return nil, fmt.Errorf("error preparing query CreateActorImageCan: %w", err)
	}
	if q.createActorImageCanBeStmt, err = db.PrepareContext(ctx, createActorImageCanBe); err != nil {
		return nil, fmt.Errorf("error preparing query CreateActorImageCanBe: %w", err)
	}
	if q.createActorImageCharacterMetadataStmt, err = db.PrepareContext(ctx, createActorImageCharacterMetadata); err != nil {
		return nil, fmt.Errorf("error preparing query CreateActorImageCharacterMetadata: %w", err)
	}
	if q.createActorImageContainerPropertiesStmt, err = db.PrepareContext(ctx, createActorImageContainerProperties); err != nil {
		return nil, fmt.Errorf("error preparing query CreateActorImageContainerProperties: %w", err)
	}
	if q.createActorImageFoodPropertiesStmt, err = db.PrepareContext(ctx, createActorImageFoodProperties); err != nil {
		return nil, fmt.Errorf("error preparing query CreateActorImageFoodProperties: %w", err)
	}
	if q.createActorImageFurniturePropertiesStmt, err = db.PrepareContext(ctx, createActorImageFurnitureProperties); err != nil {
		return nil, fmt.Errorf("error preparing query CreateActorImageFurnitureProperties: %w", err)
	}
	if q.createActorImageHandStmt, err = db.PrepareContext(ctx, createActorImageHand); err != nil {
		return nil, fmt.Errorf("error preparing query CreateActorImageHand: %w", err)
	}
	if q.createActorImageKeywordStmt, err = db.PrepareContext(ctx, createActorImageKeyword); err != nil {
		return nil, fmt.Errorf("error preparing query CreateActorImageKeyword: %w", err)
	}
	if q.createActorImagePlayerPropertiesStmt, err = db.PrepareContext(ctx, createActorImagePlayerProperties); err != nil {
		return nil, fmt.Errorf("error preparing query CreateActorImagePlayerProperties: %w", err)
	}
	if q.createActorImagePrimaryHandStmt, err = db.PrepareContext(ctx, createActorImagePrimaryHand); err != nil {
		return nil, fmt.Errorf("error preparing query CreateActorImagePrimaryHand: %w", err)
	}
	if q.createEmailStmt, err = db.PrepareContext(ctx, createEmail); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEmail: %w", err)
	}
	if q.createOpenRequestChangeRequestStmt, err = db.PrepareContext(ctx, createOpenRequestChangeRequest); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOpenRequestChangeRequest: %w", err)
	}
	if q.createPastRequestChangeRequestStmt, err = db.PrepareContext(ctx, createPastRequestChangeRequest); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePastRequestChangeRequest: %w", err)
	}
	if q.createPlayerStmt, err = db.PrepareContext(ctx, createPlayer); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePlayer: %w", err)
	}
	if q.createPlayerPermissionStmt, err = db.PrepareContext(ctx, createPlayerPermission); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePlayerPermission: %w", err)
	}
	if q.createPlayerPermissionIssuedChangeHistoryStmt, err = db.PrepareContext(ctx, createPlayerPermissionIssuedChangeHistory); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePlayerPermissionIssuedChangeHistory: %w", err)
	}
	if q.createPlayerPermissionRevokedChangeHistoryStmt, err = db.PrepareContext(ctx, createPlayerPermissionRevokedChangeHistory); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePlayerPermissionRevokedChangeHistory: %w", err)
	}
	if q.createPlayerSettingsStmt, err = db.PrepareContext(ctx, createPlayerSettings); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePlayerSettings: %w", err)
	}
	if q.createRequestStmt, err = db.PrepareContext(ctx, createRequest); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRequest: %w", err)
	}
	if q.createRequestChangeRequestStmt, err = db.PrepareContext(ctx, createRequestChangeRequest); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRequestChangeRequest: %w", err)
	}
	if q.createRequestFieldStmt, err = db.PrepareContext(ctx, createRequestField); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRequestField: %w", err)
	}
	if q.createRequestSubfieldStmt, err = db.PrepareContext(ctx, createRequestSubfield); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRequestSubfield: %w", err)
	}
	if q.createRoomStmt, err = db.PrepareContext(ctx, createRoom); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRoom: %w", err)
	}
	if q.deleteActorImageCanStmt, err = db.PrepareContext(ctx, deleteActorImageCan); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteActorImageCan: %w", err)
	}
	if q.deleteActorImageCanBeStmt, err = db.PrepareContext(ctx, deleteActorImageCanBe); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteActorImageCanBe: %w", err)
	}
	if q.deleteActorImageContainerPropertiesStmt, err = db.PrepareContext(ctx, deleteActorImageContainerProperties); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteActorImageContainerProperties: %w", err)
	}
	if q.deleteActorImageFoodPropertiesStmt, err = db.PrepareContext(ctx, deleteActorImageFoodProperties); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteActorImageFoodProperties: %w", err)
	}
	if q.deleteActorImageFurniturePropertiesStmt, err = db.PrepareContext(ctx, deleteActorImageFurnitureProperties); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteActorImageFurnitureProperties: %w", err)
	}
	if q.deleteActorImageHandStmt, err = db.PrepareContext(ctx, deleteActorImageHand); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteActorImageHand: %w", err)
	}
	if q.deleteActorImagePrimaryHandStmt, err = db.PrepareContext(ctx, deleteActorImagePrimaryHand); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteActorImagePrimaryHand: %w", err)
	}
	if q.deleteEmailStmt, err = db.PrepareContext(ctx, deleteEmail); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEmail: %w", err)
	}
	if q.deleteOpenRequestChangeRequestStmt, err = db.PrepareContext(ctx, deleteOpenRequestChangeRequest); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOpenRequestChangeRequest: %w", err)
	}
	if q.deletePlayerPermissionStmt, err = db.PrepareContext(ctx, deletePlayerPermission); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePlayerPermission: %w", err)
	}
	if q.deleteRequestChangeRequestStmt, err = db.PrepareContext(ctx, deleteRequestChangeRequest); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRequestChangeRequest: %w", err)
	}
	if q.deleteRequestSubfieldStmt, err = db.PrepareContext(ctx, deleteRequestSubfield); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRequestSubfield: %w", err)
	}
	if q.editOpenRequestChangeRequestStmt, err = db.PrepareContext(ctx, editOpenRequestChangeRequest); err != nil {
		return nil, fmt.Errorf("error preparing query EditOpenRequestChangeRequest: %w", err)
	}
	if q.getActorImageStmt, err = db.PrepareContext(ctx, getActorImage); err != nil {
		return nil, fmt.Errorf("error preparing query GetActorImage: %w", err)
	}
	if q.getActorImageByNameStmt, err = db.PrepareContext(ctx, getActorImageByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetActorImageByName: %w", err)
	}
	if q.getActorImageContainerPropertiesStmt, err = db.PrepareContext(ctx, getActorImageContainerProperties); err != nil {
		return nil, fmt.Errorf("error preparing query GetActorImageContainerProperties: %w", err)
	}
	if q.getActorImageFoodPropertiesStmt, err = db.PrepareContext(ctx, getActorImageFoodProperties); err != nil {
		return nil, fmt.Errorf("error preparing query GetActorImageFoodProperties: %w", err)
	}
	if q.getActorImageFurniturePropertiesStmt, err = db.PrepareContext(ctx, getActorImageFurnitureProperties); err != nil {
		return nil, fmt.Errorf("error preparing query GetActorImageFurnitureProperties: %w", err)
	}
	if q.getActorImagePlayerPropertiesForImageStmt, err = db.PrepareContext(ctx, getActorImagePlayerPropertiesForImage); err != nil {
		return nil, fmt.Errorf("error preparing query GetActorImagePlayerPropertiesForImage: %w", err)
	}
	if q.getEmailStmt, err = db.PrepareContext(ctx, getEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetEmail: %w", err)
	}
	if q.getEmailByAddressForPlayerStmt, err = db.PrepareContext(ctx, getEmailByAddressForPlayer); err != nil {
		return nil, fmt.Errorf("error preparing query GetEmailByAddressForPlayer: %w", err)
	}
	if q.getHelpStmt, err = db.PrepareContext(ctx, getHelp); err != nil {
		return nil, fmt.Errorf("error preparing query GetHelp: %w", err)
	}
	if q.getHelpRelatedStmt, err = db.PrepareContext(ctx, getHelpRelated); err != nil {
		return nil, fmt.Errorf("error preparing query GetHelpRelated: %w", err)
	}
	if q.getOpenRequestChangeRequestStmt, err = db.PrepareContext(ctx, getOpenRequestChangeRequest); err != nil {
		return nil, fmt.Errorf("error preparing query GetOpenRequestChangeRequest: %w", err)
	}
	if q.getOpenRequestChangeRequestForRequestFieldStmt, err = db.PrepareContext(ctx, getOpenRequestChangeRequestForRequestField); err != nil {
		return nil, fmt.Errorf("error preparing query GetOpenRequestChangeRequestForRequestField: %w", err)
	}
	if q.getPlayerStmt, err = db.PrepareContext(ctx, getPlayer); err != nil {
		return nil, fmt.Errorf("error preparing query GetPlayer: %w", err)
	}
	if q.getPlayerByUsernameStmt, err = db.PrepareContext(ctx, getPlayerByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetPlayerByUsername: %w", err)
	}
	if q.getPlayerSettingsStmt, err = db.PrepareContext(ctx, getPlayerSettings); err != nil {
		return nil, fmt.Errorf("error preparing query GetPlayerSettings: %w", err)
	}
	if q.getPlayerUsernameStmt, err = db.PrepareContext(ctx, getPlayerUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetPlayerUsername: %w", err)
	}
	if q.getPlayerUsernameByIdStmt, err = db.PrepareContext(ctx, getPlayerUsernameById); err != nil {
		return nil, fmt.Errorf("error preparing query GetPlayerUsernameById: %w", err)
	}
	if q.getRequestStmt, err = db.PrepareContext(ctx, getRequest); err != nil {
		return nil, fmt.Errorf("error preparing query GetRequest: %w", err)
	}
	if q.getRequestChangeRequestByFieldIDStmt, err = db.PrepareContext(ctx, getRequestChangeRequestByFieldID); err != nil {
		return nil, fmt.Errorf("error preparing query GetRequestChangeRequestByFieldID: %w", err)
	}
	if q.getRequestFieldStmt, err = db.PrepareContext(ctx, getRequestField); err != nil {
		return nil, fmt.Errorf("error preparing query GetRequestField: %w", err)
	}
	if q.getRequestFieldByTypeStmt, err = db.PrepareContext(ctx, getRequestFieldByType); err != nil {
		return nil, fmt.Errorf("error preparing query GetRequestFieldByType: %w", err)
	}
	if q.getRequestFieldByTypeWithChangeRequestsStmt, err = db.PrepareContext(ctx, getRequestFieldByTypeWithChangeRequests); err != nil {
		return nil, fmt.Errorf("error preparing query GetRequestFieldByTypeWithChangeRequests: %w", err)
	}
	if q.getRequestSubfieldStmt, err = db.PrepareContext(ctx, getRequestSubfield); err != nil {
		return nil, fmt.Errorf("error preparing query GetRequestSubfield: %w", err)
	}
	if q.getRoomStmt, err = db.PrepareContext(ctx, getRoom); err != nil {
		return nil, fmt.Errorf("error preparing query GetRoom: %w", err)
	}
	if q.getTagsForHelpFileStmt, err = db.PrepareContext(ctx, getTagsForHelpFile); err != nil {
		return nil, fmt.Errorf("error preparing query GetTagsForHelpFile: %w", err)
	}
	if q.getVerifiedEmailByAddressStmt, err = db.PrepareContext(ctx, getVerifiedEmailByAddress); err != nil {
		return nil, fmt.Errorf("error preparing query GetVerifiedEmailByAddress: %w", err)
	}
	if q.listActorImageCanStmt, err = db.PrepareContext(ctx, listActorImageCan); err != nil {
		return nil, fmt.Errorf("error preparing query ListActorImageCan: %w", err)
	}
	if q.listActorImageCanBeStmt, err = db.PrepareContext(ctx, listActorImageCanBe); err != nil {
		return nil, fmt.Errorf("error preparing query ListActorImageCanBe: %w", err)
	}
	if q.listActorImageKeywordsStmt, err = db.PrepareContext(ctx, listActorImageKeywords); err != nil {
		return nil, fmt.Errorf("error preparing query ListActorImageKeywords: %w", err)
	}
	if q.listActorImagesStmt, err = db.PrepareContext(ctx, listActorImages); err != nil {
		return nil, fmt.Errorf("error preparing query ListActorImages: %w", err)
	}
	if q.listActorImagesHandsStmt, err = db.PrepareContext(ctx, listActorImagesHands); err != nil {
		return nil, fmt.Errorf("error preparing query ListActorImagesHands: %w", err)
	}
	if q.listActorImagesPrimaryHandsStmt, err = db.PrepareContext(ctx, listActorImagesPrimaryHands); err != nil {
		return nil, fmt.Errorf("error preparing query ListActorImagesPrimaryHands: %w", err)
	}
	if q.listEmailsStmt, err = db.PrepareContext(ctx, listEmails); err != nil {
		return nil, fmt.Errorf("error preparing query ListEmails: %w", err)
	}
	if q.listHelpHeadersStmt, err = db.PrepareContext(ctx, listHelpHeaders); err != nil {
		return nil, fmt.Errorf("error preparing query ListHelpHeaders: %w", err)
	}
	if q.listHelpSlugsStmt, err = db.PrepareContext(ctx, listHelpSlugs); err != nil {
		return nil, fmt.Errorf("error preparing query ListHelpSlugs: %w", err)
	}
	if q.listOpenRequestChangeRequestsByFieldIDStmt, err = db.PrepareContext(ctx, listOpenRequestChangeRequestsByFieldID); err != nil {
		return nil, fmt.Errorf("error preparing query ListOpenRequestChangeRequestsByFieldID: %w", err)
	}
	if q.listOpenRequestChangeRequestsForRequestStmt, err = db.PrepareContext(ctx, listOpenRequestChangeRequestsForRequest); err != nil {
		return nil, fmt.Errorf("error preparing query ListOpenRequestChangeRequestsForRequest: %w", err)
	}
	if q.listPlayerPermissionsStmt, err = db.PrepareContext(ctx, listPlayerPermissions); err != nil {
		return nil, fmt.Errorf("error preparing query ListPlayerPermissions: %w", err)
	}
	if q.listRequestChangeRequestsByFieldIDStmt, err = db.PrepareContext(ctx, listRequestChangeRequestsByFieldID); err != nil {
		return nil, fmt.Errorf("error preparing query ListRequestChangeRequestsByFieldID: %w", err)
	}
	if q.listRequestFieldsForRequestStmt, err = db.PrepareContext(ctx, listRequestFieldsForRequest); err != nil {
		return nil, fmt.Errorf("error preparing query ListRequestFieldsForRequest: %w", err)
	}
	if q.listRequestFieldsForRequestWithChangeRequestsStmt, err = db.PrepareContext(ctx, listRequestFieldsForRequestWithChangeRequests); err != nil {
		return nil, fmt.Errorf("error preparing query ListRequestFieldsForRequestWithChangeRequests: %w", err)
	}
	if q.listRequestSubfieldsForFieldStmt, err = db.PrepareContext(ctx, listRequestSubfieldsForField); err != nil {
		return nil, fmt.Errorf("error preparing query ListRequestSubfieldsForField: %w", err)
	}
	if q.listRequestSubfieldsForFieldsStmt, err = db.PrepareContext(ctx, listRequestSubfieldsForFields); err != nil {
		return nil, fmt.Errorf("error preparing query ListRequestSubfieldsForFields: %w", err)
	}
	if q.listRequestsByTypeAndStatusStmt, err = db.PrepareContext(ctx, listRequestsByTypeAndStatus); err != nil {
		return nil, fmt.Errorf("error preparing query ListRequestsByTypeAndStatus: %w", err)
	}
	if q.listRequestsForPlayerStmt, err = db.PrepareContext(ctx, listRequestsForPlayer); err != nil {
		return nil, fmt.Errorf("error preparing query ListRequestsForPlayer: %w", err)
	}
	if q.listRoomsStmt, err = db.PrepareContext(ctx, listRooms); err != nil {
		return nil, fmt.Errorf("error preparing query ListRooms: %w", err)
	}
	if q.listRoomsByIDsStmt, err = db.PrepareContext(ctx, listRoomsByIDs); err != nil {
		return nil, fmt.Errorf("error preparing query ListRoomsByIDs: %w", err)
	}
	if q.listVerifiedEmailsStmt, err = db.PrepareContext(ctx, listVerifiedEmails); err != nil {
		return nil, fmt.Errorf("error preparing query ListVerifiedEmails: %w", err)
	}
	if q.markEmailVerifiedStmt, err = db.PrepareContext(ctx, markEmailVerified); err != nil {
		return nil, fmt.Errorf("error preparing query MarkEmailVerified: %w", err)
	}
	if q.searchHelpByCategoryStmt, err = db.PrepareContext(ctx, searchHelpByCategory); err != nil {
		return nil, fmt.Errorf("error preparing query SearchHelpByCategory: %w", err)
	}
	if q.searchHelpByContentStmt, err = db.PrepareContext(ctx, searchHelpByContent); err != nil {
		return nil, fmt.Errorf("error preparing query SearchHelpByContent: %w", err)
	}
	if q.searchHelpByTagsStmt, err = db.PrepareContext(ctx, searchHelpByTags); err != nil {
		return nil, fmt.Errorf("error preparing query SearchHelpByTags: %w", err)
	}
	if q.searchHelpByTitleStmt, err = db.PrepareContext(ctx, searchHelpByTitle); err != nil {
		return nil, fmt.Errorf("error preparing query SearchHelpByTitle: %w", err)
	}
	if q.searchPlayersByUsernameStmt, err = db.PrepareContext(ctx, searchPlayersByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query SearchPlayersByUsername: %w", err)
	}
	if q.searchTagsStmt, err = db.PrepareContext(ctx, searchTags); err != nil {
		return nil, fmt.Errorf("error preparing query SearchTags: %w", err)
	}
	if q.setActorImagePlayerPropertiesCurrentStmt, err = db.PrepareContext(ctx, setActorImagePlayerPropertiesCurrent); err != nil {
		return nil, fmt.Errorf("error preparing query SetActorImagePlayerPropertiesCurrent: %w", err)
	}
	if q.updateActorImageDescriptionStmt, err = db.PrepareContext(ctx, updateActorImageDescription); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateActorImageDescription: %w", err)
	}
	if q.updateActorImageShortDescriptionStmt, err = db.PrepareContext(ctx, updateActorImageShortDescription); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateActorImageShortDescription: %w", err)
	}
	if q.updatePlayerPasswordStmt, err = db.PrepareContext(ctx, updatePlayerPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePlayerPassword: %w", err)
	}
	if q.updatePlayerSettingsThemeStmt, err = db.PrepareContext(ctx, updatePlayerSettingsTheme); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePlayerSettingsTheme: %w", err)
	}
	if q.updateRequestFieldStatusStmt, err = db.PrepareContext(ctx, updateRequestFieldStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRequestFieldStatus: %w", err)
	}
	if q.updateRequestFieldStatusByRequestAndTypeStmt, err = db.PrepareContext(ctx, updateRequestFieldStatusByRequestAndType); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRequestFieldStatusByRequestAndType: %w", err)
	}
	if q.updateRequestFieldValueStmt, err = db.PrepareContext(ctx, updateRequestFieldValue); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRequestFieldValue: %w", err)
	}
	if q.updateRequestFieldValueByRequestAndTypeStmt, err = db.PrepareContext(ctx, updateRequestFieldValueByRequestAndType); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRequestFieldValueByRequestAndType: %w", err)
	}
	if q.updateRequestReviewerStmt, err = db.PrepareContext(ctx, updateRequestReviewer); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRequestReviewer: %w", err)
	}
	if q.updateRequestStatusStmt, err = db.PrepareContext(ctx, updateRequestStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRequestStatus: %w", err)
	}
	if q.updateRequestSubfieldStmt, err = db.PrepareContext(ctx, updateRequestSubfield); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRequestSubfield: %w", err)
	}
	if q.updateRoomStmt, err = db.PrepareContext(ctx, updateRoom); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRoom: %w", err)
	}
	if q.updateRoomDescriptionStmt, err = db.PrepareContext(ctx, updateRoomDescription); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRoomDescription: %w", err)
	}
	if q.updateRoomExitEastStmt, err = db.PrepareContext(ctx, updateRoomExitEast); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRoomExitEast: %w", err)
	}
	if q.updateRoomExitNorthStmt, err = db.PrepareContext(ctx, updateRoomExitNorth); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRoomExitNorth: %w", err)
	}
	if q.updateRoomExitNortheastStmt, err = db.PrepareContext(ctx, updateRoomExitNortheast); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRoomExitNortheast: %w", err)
	}
	if q.updateRoomExitNorthwestStmt, err = db.PrepareContext(ctx, updateRoomExitNorthwest); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRoomExitNorthwest: %w", err)
	}
	if q.updateRoomExitSouthStmt, err = db.PrepareContext(ctx, updateRoomExitSouth); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRoomExitSouth: %w", err)
	}
	if q.updateRoomExitSoutheastStmt, err = db.PrepareContext(ctx, updateRoomExitSoutheast); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRoomExitSoutheast: %w", err)
	}
	if q.updateRoomExitSouthwestStmt, err = db.PrepareContext(ctx, updateRoomExitSouthwest); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRoomExitSouthwest: %w", err)
	}
	if q.updateRoomExitWestStmt, err = db.PrepareContext(ctx, updateRoomExitWest); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRoomExitWest: %w", err)
	}
	if q.updateRoomSizeStmt, err = db.PrepareContext(ctx, updateRoomSize); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRoomSize: %w", err)
	}
	if q.updateRoomTitleStmt, err = db.PrepareContext(ctx, updateRoomTitle); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRoomTitle: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.batchCreateRequestChangeRequestStmt != nil {
		if cerr := q.batchCreateRequestChangeRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing batchCreateRequestChangeRequestStmt: %w", cerr)
		}
	}
	if q.batchDeleteOpenRequestChangeRequestStmt != nil {
		if cerr := q.batchDeleteOpenRequestChangeRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing batchDeleteOpenRequestChangeRequestStmt: %w", cerr)
		}
	}
	if q.countCurrentActorImagePlayerPropertiesForPlayerStmt != nil {
		if cerr := q.countCurrentActorImagePlayerPropertiesForPlayerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countCurrentActorImagePlayerPropertiesForPlayerStmt: %w", cerr)
		}
	}
	if q.countEmailsStmt != nil {
		if cerr := q.countEmailsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countEmailsStmt: %w", cerr)
		}
	}
	if q.countOpenRequestChangeRequestsForRequestStmt != nil {
		if cerr := q.countOpenRequestChangeRequestsForRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countOpenRequestChangeRequestsForRequestStmt: %w", cerr)
		}
	}
	if q.createActorImageStmt != nil {
		if cerr := q.createActorImageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createActorImageStmt: %w", cerr)
		}
	}
	if q.createActorImageCanStmt != nil {
		if cerr := q.createActorImageCanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createActorImageCanStmt: %w", cerr)
		}
	}
	if q.createActorImageCanBeStmt != nil {
		if cerr := q.createActorImageCanBeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createActorImageCanBeStmt: %w", cerr)
		}
	}
	if q.createActorImageCharacterMetadataStmt != nil {
		if cerr := q.createActorImageCharacterMetadataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createActorImageCharacterMetadataStmt: %w", cerr)
		}
	}
	if q.createActorImageContainerPropertiesStmt != nil {
		if cerr := q.createActorImageContainerPropertiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createActorImageContainerPropertiesStmt: %w", cerr)
		}
	}
	if q.createActorImageFoodPropertiesStmt != nil {
		if cerr := q.createActorImageFoodPropertiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createActorImageFoodPropertiesStmt: %w", cerr)
		}
	}
	if q.createActorImageFurniturePropertiesStmt != nil {
		if cerr := q.createActorImageFurniturePropertiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createActorImageFurniturePropertiesStmt: %w", cerr)
		}
	}
	if q.createActorImageHandStmt != nil {
		if cerr := q.createActorImageHandStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createActorImageHandStmt: %w", cerr)
		}
	}
	if q.createActorImageKeywordStmt != nil {
		if cerr := q.createActorImageKeywordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createActorImageKeywordStmt: %w", cerr)
		}
	}
	if q.createActorImagePlayerPropertiesStmt != nil {
		if cerr := q.createActorImagePlayerPropertiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createActorImagePlayerPropertiesStmt: %w", cerr)
		}
	}
	if q.createActorImagePrimaryHandStmt != nil {
		if cerr := q.createActorImagePrimaryHandStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createActorImagePrimaryHandStmt: %w", cerr)
		}
	}
	if q.createEmailStmt != nil {
		if cerr := q.createEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEmailStmt: %w", cerr)
		}
	}
	if q.createOpenRequestChangeRequestStmt != nil {
		if cerr := q.createOpenRequestChangeRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOpenRequestChangeRequestStmt: %w", cerr)
		}
	}
	if q.createPastRequestChangeRequestStmt != nil {
		if cerr := q.createPastRequestChangeRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPastRequestChangeRequestStmt: %w", cerr)
		}
	}
	if q.createPlayerStmt != nil {
		if cerr := q.createPlayerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPlayerStmt: %w", cerr)
		}
	}
	if q.createPlayerPermissionStmt != nil {
		if cerr := q.createPlayerPermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPlayerPermissionStmt: %w", cerr)
		}
	}
	if q.createPlayerPermissionIssuedChangeHistoryStmt != nil {
		if cerr := q.createPlayerPermissionIssuedChangeHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPlayerPermissionIssuedChangeHistoryStmt: %w", cerr)
		}
	}
	if q.createPlayerPermissionRevokedChangeHistoryStmt != nil {
		if cerr := q.createPlayerPermissionRevokedChangeHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPlayerPermissionRevokedChangeHistoryStmt: %w", cerr)
		}
	}
	if q.createPlayerSettingsStmt != nil {
		if cerr := q.createPlayerSettingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPlayerSettingsStmt: %w", cerr)
		}
	}
	if q.createRequestStmt != nil {
		if cerr := q.createRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRequestStmt: %w", cerr)
		}
	}
	if q.createRequestChangeRequestStmt != nil {
		if cerr := q.createRequestChangeRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRequestChangeRequestStmt: %w", cerr)
		}
	}
	if q.createRequestFieldStmt != nil {
		if cerr := q.createRequestFieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRequestFieldStmt: %w", cerr)
		}
	}
	if q.createRequestSubfieldStmt != nil {
		if cerr := q.createRequestSubfieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRequestSubfieldStmt: %w", cerr)
		}
	}
	if q.createRoomStmt != nil {
		if cerr := q.createRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRoomStmt: %w", cerr)
		}
	}
	if q.deleteActorImageCanStmt != nil {
		if cerr := q.deleteActorImageCanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteActorImageCanStmt: %w", cerr)
		}
	}
	if q.deleteActorImageCanBeStmt != nil {
		if cerr := q.deleteActorImageCanBeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteActorImageCanBeStmt: %w", cerr)
		}
	}
	if q.deleteActorImageContainerPropertiesStmt != nil {
		if cerr := q.deleteActorImageContainerPropertiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteActorImageContainerPropertiesStmt: %w", cerr)
		}
	}
	if q.deleteActorImageFoodPropertiesStmt != nil {
		if cerr := q.deleteActorImageFoodPropertiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteActorImageFoodPropertiesStmt: %w", cerr)
		}
	}
	if q.deleteActorImageFurniturePropertiesStmt != nil {
		if cerr := q.deleteActorImageFurniturePropertiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteActorImageFurniturePropertiesStmt: %w", cerr)
		}
	}
	if q.deleteActorImageHandStmt != nil {
		if cerr := q.deleteActorImageHandStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteActorImageHandStmt: %w", cerr)
		}
	}
	if q.deleteActorImagePrimaryHandStmt != nil {
		if cerr := q.deleteActorImagePrimaryHandStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteActorImagePrimaryHandStmt: %w", cerr)
		}
	}
	if q.deleteEmailStmt != nil {
		if cerr := q.deleteEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEmailStmt: %w", cerr)
		}
	}
	if q.deleteOpenRequestChangeRequestStmt != nil {
		if cerr := q.deleteOpenRequestChangeRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOpenRequestChangeRequestStmt: %w", cerr)
		}
	}
	if q.deletePlayerPermissionStmt != nil {
		if cerr := q.deletePlayerPermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePlayerPermissionStmt: %w", cerr)
		}
	}
	if q.deleteRequestChangeRequestStmt != nil {
		if cerr := q.deleteRequestChangeRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRequestChangeRequestStmt: %w", cerr)
		}
	}
	if q.deleteRequestSubfieldStmt != nil {
		if cerr := q.deleteRequestSubfieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRequestSubfieldStmt: %w", cerr)
		}
	}
	if q.editOpenRequestChangeRequestStmt != nil {
		if cerr := q.editOpenRequestChangeRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing editOpenRequestChangeRequestStmt: %w", cerr)
		}
	}
	if q.getActorImageStmt != nil {
		if cerr := q.getActorImageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActorImageStmt: %w", cerr)
		}
	}
	if q.getActorImageByNameStmt != nil {
		if cerr := q.getActorImageByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActorImageByNameStmt: %w", cerr)
		}
	}
	if q.getActorImageContainerPropertiesStmt != nil {
		if cerr := q.getActorImageContainerPropertiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActorImageContainerPropertiesStmt: %w", cerr)
		}
	}
	if q.getActorImageFoodPropertiesStmt != nil {
		if cerr := q.getActorImageFoodPropertiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActorImageFoodPropertiesStmt: %w", cerr)
		}
	}
	if q.getActorImageFurniturePropertiesStmt != nil {
		if cerr := q.getActorImageFurniturePropertiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActorImageFurniturePropertiesStmt: %w", cerr)
		}
	}
	if q.getActorImagePlayerPropertiesForImageStmt != nil {
		if cerr := q.getActorImagePlayerPropertiesForImageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActorImagePlayerPropertiesForImageStmt: %w", cerr)
		}
	}
	if q.getEmailStmt != nil {
		if cerr := q.getEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEmailStmt: %w", cerr)
		}
	}
	if q.getEmailByAddressForPlayerStmt != nil {
		if cerr := q.getEmailByAddressForPlayerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEmailByAddressForPlayerStmt: %w", cerr)
		}
	}
	if q.getHelpStmt != nil {
		if cerr := q.getHelpStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHelpStmt: %w", cerr)
		}
	}
	if q.getHelpRelatedStmt != nil {
		if cerr := q.getHelpRelatedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHelpRelatedStmt: %w", cerr)
		}
	}
	if q.getOpenRequestChangeRequestStmt != nil {
		if cerr := q.getOpenRequestChangeRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOpenRequestChangeRequestStmt: %w", cerr)
		}
	}
	if q.getOpenRequestChangeRequestForRequestFieldStmt != nil {
		if cerr := q.getOpenRequestChangeRequestForRequestFieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOpenRequestChangeRequestForRequestFieldStmt: %w", cerr)
		}
	}
	if q.getPlayerStmt != nil {
		if cerr := q.getPlayerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPlayerStmt: %w", cerr)
		}
	}
	if q.getPlayerByUsernameStmt != nil {
		if cerr := q.getPlayerByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPlayerByUsernameStmt: %w", cerr)
		}
	}
	if q.getPlayerSettingsStmt != nil {
		if cerr := q.getPlayerSettingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPlayerSettingsStmt: %w", cerr)
		}
	}
	if q.getPlayerUsernameStmt != nil {
		if cerr := q.getPlayerUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPlayerUsernameStmt: %w", cerr)
		}
	}
	if q.getPlayerUsernameByIdStmt != nil {
		if cerr := q.getPlayerUsernameByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPlayerUsernameByIdStmt: %w", cerr)
		}
	}
	if q.getRequestStmt != nil {
		if cerr := q.getRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRequestStmt: %w", cerr)
		}
	}
	if q.getRequestChangeRequestByFieldIDStmt != nil {
		if cerr := q.getRequestChangeRequestByFieldIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRequestChangeRequestByFieldIDStmt: %w", cerr)
		}
	}
	if q.getRequestFieldStmt != nil {
		if cerr := q.getRequestFieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRequestFieldStmt: %w", cerr)
		}
	}
	if q.getRequestFieldByTypeStmt != nil {
		if cerr := q.getRequestFieldByTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRequestFieldByTypeStmt: %w", cerr)
		}
	}
	if q.getRequestFieldByTypeWithChangeRequestsStmt != nil {
		if cerr := q.getRequestFieldByTypeWithChangeRequestsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRequestFieldByTypeWithChangeRequestsStmt: %w", cerr)
		}
	}
	if q.getRequestSubfieldStmt != nil {
		if cerr := q.getRequestSubfieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRequestSubfieldStmt: %w", cerr)
		}
	}
	if q.getRoomStmt != nil {
		if cerr := q.getRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRoomStmt: %w", cerr)
		}
	}
	if q.getTagsForHelpFileStmt != nil {
		if cerr := q.getTagsForHelpFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTagsForHelpFileStmt: %w", cerr)
		}
	}
	if q.getVerifiedEmailByAddressStmt != nil {
		if cerr := q.getVerifiedEmailByAddressStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getVerifiedEmailByAddressStmt: %w", cerr)
		}
	}
	if q.listActorImageCanStmt != nil {
		if cerr := q.listActorImageCanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listActorImageCanStmt: %w", cerr)
		}
	}
	if q.listActorImageCanBeStmt != nil {
		if cerr := q.listActorImageCanBeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listActorImageCanBeStmt: %w", cerr)
		}
	}
	if q.listActorImageKeywordsStmt != nil {
		if cerr := q.listActorImageKeywordsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listActorImageKeywordsStmt: %w", cerr)
		}
	}
	if q.listActorImagesStmt != nil {
		if cerr := q.listActorImagesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listActorImagesStmt: %w", cerr)
		}
	}
	if q.listActorImagesHandsStmt != nil {
		if cerr := q.listActorImagesHandsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listActorImagesHandsStmt: %w", cerr)
		}
	}
	if q.listActorImagesPrimaryHandsStmt != nil {
		if cerr := q.listActorImagesPrimaryHandsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listActorImagesPrimaryHandsStmt: %w", cerr)
		}
	}
	if q.listEmailsStmt != nil {
		if cerr := q.listEmailsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEmailsStmt: %w", cerr)
		}
	}
	if q.listHelpHeadersStmt != nil {
		if cerr := q.listHelpHeadersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listHelpHeadersStmt: %w", cerr)
		}
	}
	if q.listHelpSlugsStmt != nil {
		if cerr := q.listHelpSlugsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listHelpSlugsStmt: %w", cerr)
		}
	}
	if q.listOpenRequestChangeRequestsByFieldIDStmt != nil {
		if cerr := q.listOpenRequestChangeRequestsByFieldIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listOpenRequestChangeRequestsByFieldIDStmt: %w", cerr)
		}
	}
	if q.listOpenRequestChangeRequestsForRequestStmt != nil {
		if cerr := q.listOpenRequestChangeRequestsForRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listOpenRequestChangeRequestsForRequestStmt: %w", cerr)
		}
	}
	if q.listPlayerPermissionsStmt != nil {
		if cerr := q.listPlayerPermissionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPlayerPermissionsStmt: %w", cerr)
		}
	}
	if q.listRequestChangeRequestsByFieldIDStmt != nil {
		if cerr := q.listRequestChangeRequestsByFieldIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRequestChangeRequestsByFieldIDStmt: %w", cerr)
		}
	}
	if q.listRequestFieldsForRequestStmt != nil {
		if cerr := q.listRequestFieldsForRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRequestFieldsForRequestStmt: %w", cerr)
		}
	}
	if q.listRequestFieldsForRequestWithChangeRequestsStmt != nil {
		if cerr := q.listRequestFieldsForRequestWithChangeRequestsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRequestFieldsForRequestWithChangeRequestsStmt: %w", cerr)
		}
	}
	if q.listRequestSubfieldsForFieldStmt != nil {
		if cerr := q.listRequestSubfieldsForFieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRequestSubfieldsForFieldStmt: %w", cerr)
		}
	}
	if q.listRequestSubfieldsForFieldsStmt != nil {
		if cerr := q.listRequestSubfieldsForFieldsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRequestSubfieldsForFieldsStmt: %w", cerr)
		}
	}
	if q.listRequestsByTypeAndStatusStmt != nil {
		if cerr := q.listRequestsByTypeAndStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRequestsByTypeAndStatusStmt: %w", cerr)
		}
	}
	if q.listRequestsForPlayerStmt != nil {
		if cerr := q.listRequestsForPlayerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRequestsForPlayerStmt: %w", cerr)
		}
	}
	if q.listRoomsStmt != nil {
		if cerr := q.listRoomsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRoomsStmt: %w", cerr)
		}
	}
	if q.listRoomsByIDsStmt != nil {
		if cerr := q.listRoomsByIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRoomsByIDsStmt: %w", cerr)
		}
	}
	if q.listVerifiedEmailsStmt != nil {
		if cerr := q.listVerifiedEmailsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listVerifiedEmailsStmt: %w", cerr)
		}
	}
	if q.markEmailVerifiedStmt != nil {
		if cerr := q.markEmailVerifiedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing markEmailVerifiedStmt: %w", cerr)
		}
	}
	if q.searchHelpByCategoryStmt != nil {
		if cerr := q.searchHelpByCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchHelpByCategoryStmt: %w", cerr)
		}
	}
	if q.searchHelpByContentStmt != nil {
		if cerr := q.searchHelpByContentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchHelpByContentStmt: %w", cerr)
		}
	}
	if q.searchHelpByTagsStmt != nil {
		if cerr := q.searchHelpByTagsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchHelpByTagsStmt: %w", cerr)
		}
	}
	if q.searchHelpByTitleStmt != nil {
		if cerr := q.searchHelpByTitleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchHelpByTitleStmt: %w", cerr)
		}
	}
	if q.searchPlayersByUsernameStmt != nil {
		if cerr := q.searchPlayersByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchPlayersByUsernameStmt: %w", cerr)
		}
	}
	if q.searchTagsStmt != nil {
		if cerr := q.searchTagsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchTagsStmt: %w", cerr)
		}
	}
	if q.setActorImagePlayerPropertiesCurrentStmt != nil {
		if cerr := q.setActorImagePlayerPropertiesCurrentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setActorImagePlayerPropertiesCurrentStmt: %w", cerr)
		}
	}
	if q.updateActorImageDescriptionStmt != nil {
		if cerr := q.updateActorImageDescriptionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateActorImageDescriptionStmt: %w", cerr)
		}
	}
	if q.updateActorImageShortDescriptionStmt != nil {
		if cerr := q.updateActorImageShortDescriptionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateActorImageShortDescriptionStmt: %w", cerr)
		}
	}
	if q.updatePlayerPasswordStmt != nil {
		if cerr := q.updatePlayerPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePlayerPasswordStmt: %w", cerr)
		}
	}
	if q.updatePlayerSettingsThemeStmt != nil {
		if cerr := q.updatePlayerSettingsThemeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePlayerSettingsThemeStmt: %w", cerr)
		}
	}
	if q.updateRequestFieldStatusStmt != nil {
		if cerr := q.updateRequestFieldStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRequestFieldStatusStmt: %w", cerr)
		}
	}
	if q.updateRequestFieldStatusByRequestAndTypeStmt != nil {
		if cerr := q.updateRequestFieldStatusByRequestAndTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRequestFieldStatusByRequestAndTypeStmt: %w", cerr)
		}
	}
	if q.updateRequestFieldValueStmt != nil {
		if cerr := q.updateRequestFieldValueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRequestFieldValueStmt: %w", cerr)
		}
	}
	if q.updateRequestFieldValueByRequestAndTypeStmt != nil {
		if cerr := q.updateRequestFieldValueByRequestAndTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRequestFieldValueByRequestAndTypeStmt: %w", cerr)
		}
	}
	if q.updateRequestReviewerStmt != nil {
		if cerr := q.updateRequestReviewerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRequestReviewerStmt: %w", cerr)
		}
	}
	if q.updateRequestStatusStmt != nil {
		if cerr := q.updateRequestStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRequestStatusStmt: %w", cerr)
		}
	}
	if q.updateRequestSubfieldStmt != nil {
		if cerr := q.updateRequestSubfieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRequestSubfieldStmt: %w", cerr)
		}
	}
	if q.updateRoomStmt != nil {
		if cerr := q.updateRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoomStmt: %w", cerr)
		}
	}
	if q.updateRoomDescriptionStmt != nil {
		if cerr := q.updateRoomDescriptionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoomDescriptionStmt: %w", cerr)
		}
	}
	if q.updateRoomExitEastStmt != nil {
		if cerr := q.updateRoomExitEastStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoomExitEastStmt: %w", cerr)
		}
	}
	if q.updateRoomExitNorthStmt != nil {
		if cerr := q.updateRoomExitNorthStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoomExitNorthStmt: %w", cerr)
		}
	}
	if q.updateRoomExitNortheastStmt != nil {
		if cerr := q.updateRoomExitNortheastStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoomExitNortheastStmt: %w", cerr)
		}
	}
	if q.updateRoomExitNorthwestStmt != nil {
		if cerr := q.updateRoomExitNorthwestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoomExitNorthwestStmt: %w", cerr)
		}
	}
	if q.updateRoomExitSouthStmt != nil {
		if cerr := q.updateRoomExitSouthStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoomExitSouthStmt: %w", cerr)
		}
	}
	if q.updateRoomExitSoutheastStmt != nil {
		if cerr := q.updateRoomExitSoutheastStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoomExitSoutheastStmt: %w", cerr)
		}
	}
	if q.updateRoomExitSouthwestStmt != nil {
		if cerr := q.updateRoomExitSouthwestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoomExitSouthwestStmt: %w", cerr)
		}
	}
	if q.updateRoomExitWestStmt != nil {
		if cerr := q.updateRoomExitWestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoomExitWestStmt: %w", cerr)
		}
	}
	if q.updateRoomSizeStmt != nil {
		if cerr := q.updateRoomSizeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoomSizeStmt: %w", cerr)
		}
	}
	if q.updateRoomTitleStmt != nil {
		if cerr := q.updateRoomTitleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoomTitleStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                                  DBTX
	tx                                                  *sql.Tx
	batchCreateRequestChangeRequestStmt                 *sql.Stmt
	batchDeleteOpenRequestChangeRequestStmt             *sql.Stmt
	countCurrentActorImagePlayerPropertiesForPlayerStmt *sql.Stmt
	countEmailsStmt                                     *sql.Stmt
	countOpenRequestChangeRequestsForRequestStmt        *sql.Stmt
	createActorImageStmt                                *sql.Stmt
	createActorImageCanStmt                             *sql.Stmt
	createActorImageCanBeStmt                           *sql.Stmt
	createActorImageCharacterMetadataStmt               *sql.Stmt
	createActorImageContainerPropertiesStmt             *sql.Stmt
	createActorImageFoodPropertiesStmt                  *sql.Stmt
	createActorImageFurniturePropertiesStmt             *sql.Stmt
	createActorImageHandStmt                            *sql.Stmt
	createActorImageKeywordStmt                         *sql.Stmt
	createActorImagePlayerPropertiesStmt                *sql.Stmt
	createActorImagePrimaryHandStmt                     *sql.Stmt
	createEmailStmt                                     *sql.Stmt
	createOpenRequestChangeRequestStmt                  *sql.Stmt
	createPastRequestChangeRequestStmt                  *sql.Stmt
	createPlayerStmt                                    *sql.Stmt
	createPlayerPermissionStmt                          *sql.Stmt
	createPlayerPermissionIssuedChangeHistoryStmt       *sql.Stmt
	createPlayerPermissionRevokedChangeHistoryStmt      *sql.Stmt
	createPlayerSettingsStmt                            *sql.Stmt
	createRequestStmt                                   *sql.Stmt
	createRequestChangeRequestStmt                      *sql.Stmt
	createRequestFieldStmt                              *sql.Stmt
	createRequestSubfieldStmt                           *sql.Stmt
	createRoomStmt                                      *sql.Stmt
	deleteActorImageCanStmt                             *sql.Stmt
	deleteActorImageCanBeStmt                           *sql.Stmt
	deleteActorImageContainerPropertiesStmt             *sql.Stmt
	deleteActorImageFoodPropertiesStmt                  *sql.Stmt
	deleteActorImageFurniturePropertiesStmt             *sql.Stmt
	deleteActorImageHandStmt                            *sql.Stmt
	deleteActorImagePrimaryHandStmt                     *sql.Stmt
	deleteEmailStmt                                     *sql.Stmt
	deleteOpenRequestChangeRequestStmt                  *sql.Stmt
	deletePlayerPermissionStmt                          *sql.Stmt
	deleteRequestChangeRequestStmt                      *sql.Stmt
	deleteRequestSubfieldStmt                           *sql.Stmt
	editOpenRequestChangeRequestStmt                    *sql.Stmt
	getActorImageStmt                                   *sql.Stmt
	getActorImageByNameStmt                             *sql.Stmt
	getActorImageContainerPropertiesStmt                *sql.Stmt
	getActorImageFoodPropertiesStmt                     *sql.Stmt
	getActorImageFurniturePropertiesStmt                *sql.Stmt
	getActorImagePlayerPropertiesForImageStmt           *sql.Stmt
	getEmailStmt                                        *sql.Stmt
	getEmailByAddressForPlayerStmt                      *sql.Stmt
	getHelpStmt                                         *sql.Stmt
	getHelpRelatedStmt                                  *sql.Stmt
	getOpenRequestChangeRequestStmt                     *sql.Stmt
	getOpenRequestChangeRequestForRequestFieldStmt      *sql.Stmt
	getPlayerStmt                                       *sql.Stmt
	getPlayerByUsernameStmt                             *sql.Stmt
	getPlayerSettingsStmt                               *sql.Stmt
	getPlayerUsernameStmt                               *sql.Stmt
	getPlayerUsernameByIdStmt                           *sql.Stmt
	getRequestStmt                                      *sql.Stmt
	getRequestChangeRequestByFieldIDStmt                *sql.Stmt
	getRequestFieldStmt                                 *sql.Stmt
	getRequestFieldByTypeStmt                           *sql.Stmt
	getRequestFieldByTypeWithChangeRequestsStmt         *sql.Stmt
	getRequestSubfieldStmt                              *sql.Stmt
	getRoomStmt                                         *sql.Stmt
	getTagsForHelpFileStmt                              *sql.Stmt
	getVerifiedEmailByAddressStmt                       *sql.Stmt
	listActorImageCanStmt                               *sql.Stmt
	listActorImageCanBeStmt                             *sql.Stmt
	listActorImageKeywordsStmt                          *sql.Stmt
	listActorImagesStmt                                 *sql.Stmt
	listActorImagesHandsStmt                            *sql.Stmt
	listActorImagesPrimaryHandsStmt                     *sql.Stmt
	listEmailsStmt                                      *sql.Stmt
	listHelpHeadersStmt                                 *sql.Stmt
	listHelpSlugsStmt                                   *sql.Stmt
	listOpenRequestChangeRequestsByFieldIDStmt          *sql.Stmt
	listOpenRequestChangeRequestsForRequestStmt         *sql.Stmt
	listPlayerPermissionsStmt                           *sql.Stmt
	listRequestChangeRequestsByFieldIDStmt              *sql.Stmt
	listRequestFieldsForRequestStmt                     *sql.Stmt
	listRequestFieldsForRequestWithChangeRequestsStmt   *sql.Stmt
	listRequestSubfieldsForFieldStmt                    *sql.Stmt
	listRequestSubfieldsForFieldsStmt                   *sql.Stmt
	listRequestsByTypeAndStatusStmt                     *sql.Stmt
	listRequestsForPlayerStmt                           *sql.Stmt
	listRoomsStmt                                       *sql.Stmt
	listRoomsByIDsStmt                                  *sql.Stmt
	listVerifiedEmailsStmt                              *sql.Stmt
	markEmailVerifiedStmt                               *sql.Stmt
	searchHelpByCategoryStmt                            *sql.Stmt
	searchHelpByContentStmt                             *sql.Stmt
	searchHelpByTagsStmt                                *sql.Stmt
	searchHelpByTitleStmt                               *sql.Stmt
	searchPlayersByUsernameStmt                         *sql.Stmt
	searchTagsStmt                                      *sql.Stmt
	setActorImagePlayerPropertiesCurrentStmt            *sql.Stmt
	updateActorImageDescriptionStmt                     *sql.Stmt
	updateActorImageShortDescriptionStmt                *sql.Stmt
	updatePlayerPasswordStmt                            *sql.Stmt
	updatePlayerSettingsThemeStmt                       *sql.Stmt
	updateRequestFieldStatusStmt                        *sql.Stmt
	updateRequestFieldStatusByRequestAndTypeStmt        *sql.Stmt
	updateRequestFieldValueStmt                         *sql.Stmt
	updateRequestFieldValueByRequestAndTypeStmt         *sql.Stmt
	updateRequestReviewerStmt                           *sql.Stmt
	updateRequestStatusStmt                             *sql.Stmt
	updateRequestSubfieldStmt                           *sql.Stmt
	updateRoomStmt                                      *sql.Stmt
	updateRoomDescriptionStmt                           *sql.Stmt
	updateRoomExitEastStmt                              *sql.Stmt
	updateRoomExitNorthStmt                             *sql.Stmt
	updateRoomExitNortheastStmt                         *sql.Stmt
	updateRoomExitNorthwestStmt                         *sql.Stmt
	updateRoomExitSouthStmt                             *sql.Stmt
	updateRoomExitSoutheastStmt                         *sql.Stmt
	updateRoomExitSouthwestStmt                         *sql.Stmt
	updateRoomExitWestStmt                              *sql.Stmt
	updateRoomSizeStmt                                  *sql.Stmt
	updateRoomTitleStmt                                 *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                      tx,
		tx:                                      tx,
		batchCreateRequestChangeRequestStmt:     q.batchCreateRequestChangeRequestStmt,
		batchDeleteOpenRequestChangeRequestStmt: q.batchDeleteOpenRequestChangeRequestStmt,
		countCurrentActorImagePlayerPropertiesForPlayerStmt: q.countCurrentActorImagePlayerPropertiesForPlayerStmt,
		countEmailsStmt: q.countEmailsStmt,
		countOpenRequestChangeRequestsForRequestStmt:      q.countOpenRequestChangeRequestsForRequestStmt,
		createActorImageStmt:                              q.createActorImageStmt,
		createActorImageCanStmt:                           q.createActorImageCanStmt,
		createActorImageCanBeStmt:                         q.createActorImageCanBeStmt,
		createActorImageCharacterMetadataStmt:             q.createActorImageCharacterMetadataStmt,
		createActorImageContainerPropertiesStmt:           q.createActorImageContainerPropertiesStmt,
		createActorImageFoodPropertiesStmt:                q.createActorImageFoodPropertiesStmt,
		createActorImageFurniturePropertiesStmt:           q.createActorImageFurniturePropertiesStmt,
		createActorImageHandStmt:                          q.createActorImageHandStmt,
		createActorImageKeywordStmt:                       q.createActorImageKeywordStmt,
		createActorImagePlayerPropertiesStmt:              q.createActorImagePlayerPropertiesStmt,
		createActorImagePrimaryHandStmt:                   q.createActorImagePrimaryHandStmt,
		createEmailStmt:                                   q.createEmailStmt,
		createOpenRequestChangeRequestStmt:                q.createOpenRequestChangeRequestStmt,
		createPastRequestChangeRequestStmt:                q.createPastRequestChangeRequestStmt,
		createPlayerStmt:                                  q.createPlayerStmt,
		createPlayerPermissionStmt:                        q.createPlayerPermissionStmt,
		createPlayerPermissionIssuedChangeHistoryStmt:     q.createPlayerPermissionIssuedChangeHistoryStmt,
		createPlayerPermissionRevokedChangeHistoryStmt:    q.createPlayerPermissionRevokedChangeHistoryStmt,
		createPlayerSettingsStmt:                          q.createPlayerSettingsStmt,
		createRequestStmt:                                 q.createRequestStmt,
		createRequestChangeRequestStmt:                    q.createRequestChangeRequestStmt,
		createRequestFieldStmt:                            q.createRequestFieldStmt,
		createRequestSubfieldStmt:                         q.createRequestSubfieldStmt,
		createRoomStmt:                                    q.createRoomStmt,
		deleteActorImageCanStmt:                           q.deleteActorImageCanStmt,
		deleteActorImageCanBeStmt:                         q.deleteActorImageCanBeStmt,
		deleteActorImageContainerPropertiesStmt:           q.deleteActorImageContainerPropertiesStmt,
		deleteActorImageFoodPropertiesStmt:                q.deleteActorImageFoodPropertiesStmt,
		deleteActorImageFurniturePropertiesStmt:           q.deleteActorImageFurniturePropertiesStmt,
		deleteActorImageHandStmt:                          q.deleteActorImageHandStmt,
		deleteActorImagePrimaryHandStmt:                   q.deleteActorImagePrimaryHandStmt,
		deleteEmailStmt:                                   q.deleteEmailStmt,
		deleteOpenRequestChangeRequestStmt:                q.deleteOpenRequestChangeRequestStmt,
		deletePlayerPermissionStmt:                        q.deletePlayerPermissionStmt,
		deleteRequestChangeRequestStmt:                    q.deleteRequestChangeRequestStmt,
		deleteRequestSubfieldStmt:                         q.deleteRequestSubfieldStmt,
		editOpenRequestChangeRequestStmt:                  q.editOpenRequestChangeRequestStmt,
		getActorImageStmt:                                 q.getActorImageStmt,
		getActorImageByNameStmt:                           q.getActorImageByNameStmt,
		getActorImageContainerPropertiesStmt:              q.getActorImageContainerPropertiesStmt,
		getActorImageFoodPropertiesStmt:                   q.getActorImageFoodPropertiesStmt,
		getActorImageFurniturePropertiesStmt:              q.getActorImageFurniturePropertiesStmt,
		getActorImagePlayerPropertiesForImageStmt:         q.getActorImagePlayerPropertiesForImageStmt,
		getEmailStmt:                                      q.getEmailStmt,
		getEmailByAddressForPlayerStmt:                    q.getEmailByAddressForPlayerStmt,
		getHelpStmt:                                       q.getHelpStmt,
		getHelpRelatedStmt:                                q.getHelpRelatedStmt,
		getOpenRequestChangeRequestStmt:                   q.getOpenRequestChangeRequestStmt,
		getOpenRequestChangeRequestForRequestFieldStmt:    q.getOpenRequestChangeRequestForRequestFieldStmt,
		getPlayerStmt:                                     q.getPlayerStmt,
		getPlayerByUsernameStmt:                           q.getPlayerByUsernameStmt,
		getPlayerSettingsStmt:                             q.getPlayerSettingsStmt,
		getPlayerUsernameStmt:                             q.getPlayerUsernameStmt,
		getPlayerUsernameByIdStmt:                         q.getPlayerUsernameByIdStmt,
		getRequestStmt:                                    q.getRequestStmt,
		getRequestChangeRequestByFieldIDStmt:              q.getRequestChangeRequestByFieldIDStmt,
		getRequestFieldStmt:                               q.getRequestFieldStmt,
		getRequestFieldByTypeStmt:                         q.getRequestFieldByTypeStmt,
		getRequestFieldByTypeWithChangeRequestsStmt:       q.getRequestFieldByTypeWithChangeRequestsStmt,
		getRequestSubfieldStmt:                            q.getRequestSubfieldStmt,
		getRoomStmt:                                       q.getRoomStmt,
		getTagsForHelpFileStmt:                            q.getTagsForHelpFileStmt,
		getVerifiedEmailByAddressStmt:                     q.getVerifiedEmailByAddressStmt,
		listActorImageCanStmt:                             q.listActorImageCanStmt,
		listActorImageCanBeStmt:                           q.listActorImageCanBeStmt,
		listActorImageKeywordsStmt:                        q.listActorImageKeywordsStmt,
		listActorImagesStmt:                               q.listActorImagesStmt,
		listActorImagesHandsStmt:                          q.listActorImagesHandsStmt,
		listActorImagesPrimaryHandsStmt:                   q.listActorImagesPrimaryHandsStmt,
		listEmailsStmt:                                    q.listEmailsStmt,
		listHelpHeadersStmt:                               q.listHelpHeadersStmt,
		listHelpSlugsStmt:                                 q.listHelpSlugsStmt,
		listOpenRequestChangeRequestsByFieldIDStmt:        q.listOpenRequestChangeRequestsByFieldIDStmt,
		listOpenRequestChangeRequestsForRequestStmt:       q.listOpenRequestChangeRequestsForRequestStmt,
		listPlayerPermissionsStmt:                         q.listPlayerPermissionsStmt,
		listRequestChangeRequestsByFieldIDStmt:            q.listRequestChangeRequestsByFieldIDStmt,
		listRequestFieldsForRequestStmt:                   q.listRequestFieldsForRequestStmt,
		listRequestFieldsForRequestWithChangeRequestsStmt: q.listRequestFieldsForRequestWithChangeRequestsStmt,
		listRequestSubfieldsForFieldStmt:                  q.listRequestSubfieldsForFieldStmt,
		listRequestSubfieldsForFieldsStmt:                 q.listRequestSubfieldsForFieldsStmt,
		listRequestsByTypeAndStatusStmt:                   q.listRequestsByTypeAndStatusStmt,
		listRequestsForPlayerStmt:                         q.listRequestsForPlayerStmt,
		listRoomsStmt:                                     q.listRoomsStmt,
		listRoomsByIDsStmt:                                q.listRoomsByIDsStmt,
		listVerifiedEmailsStmt:                            q.listVerifiedEmailsStmt,
		markEmailVerifiedStmt:                             q.markEmailVerifiedStmt,
		searchHelpByCategoryStmt:                          q.searchHelpByCategoryStmt,
		searchHelpByContentStmt:                           q.searchHelpByContentStmt,
		searchHelpByTagsStmt:                              q.searchHelpByTagsStmt,
		searchHelpByTitleStmt:                             q.searchHelpByTitleStmt,
		searchPlayersByUsernameStmt:                       q.searchPlayersByUsernameStmt,
		searchTagsStmt:                                    q.searchTagsStmt,
		setActorImagePlayerPropertiesCurrentStmt:          q.setActorImagePlayerPropertiesCurrentStmt,
		updateActorImageDescriptionStmt:                   q.updateActorImageDescriptionStmt,
		updateActorImageShortDescriptionStmt:              q.updateActorImageShortDescriptionStmt,
		updatePlayerPasswordStmt:                          q.updatePlayerPasswordStmt,
		updatePlayerSettingsThemeStmt:                     q.updatePlayerSettingsThemeStmt,
		updateRequestFieldStatusStmt:                      q.updateRequestFieldStatusStmt,
		updateRequestFieldStatusByRequestAndTypeStmt:      q.updateRequestFieldStatusByRequestAndTypeStmt,
		updateRequestFieldValueStmt:                       q.updateRequestFieldValueStmt,
		updateRequestFieldValueByRequestAndTypeStmt:       q.updateRequestFieldValueByRequestAndTypeStmt,
		updateRequestReviewerStmt:                         q.updateRequestReviewerStmt,
		updateRequestStatusStmt:                           q.updateRequestStatusStmt,
		updateRequestSubfieldStmt:                         q.updateRequestSubfieldStmt,
		updateRoomStmt:                                    q.updateRoomStmt,
		updateRoomDescriptionStmt:                         q.updateRoomDescriptionStmt,
		updateRoomExitEastStmt:                            q.updateRoomExitEastStmt,
		updateRoomExitNorthStmt:                           q.updateRoomExitNorthStmt,
		updateRoomExitNortheastStmt:                       q.updateRoomExitNortheastStmt,
		updateRoomExitNorthwestStmt:                       q.updateRoomExitNorthwestStmt,
		updateRoomExitSouthStmt:                           q.updateRoomExitSouthStmt,
		updateRoomExitSoutheastStmt:                       q.updateRoomExitSoutheastStmt,
		updateRoomExitSouthwestStmt:                       q.updateRoomExitSouthwestStmt,
		updateRoomExitWestStmt:                            q.updateRoomExitWestStmt,
		updateRoomSizeStmt:                                q.updateRoomSizeStmt,
		updateRoomTitleStmt:                               q.updateRoomTitleStmt,
	}
}
