// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: request.sql

package query

import (
	"context"
	"database/sql"
	"strings"
)

const batchCreateRequestChangeRequest = `-- name: BatchCreateRequestChangeRequest :exec
INSERT INTO
  request_change_requests
SELECT created_at, updated_at, value, text, rfid, pid, id FROM
  open_request_change_requests
WHERE
  open_request_change_requests.id IN (/*SLICE:ids*/?)
`

func (q *Queries) BatchCreateRequestChangeRequest(ctx context.Context, ids []int64) error {
	query := batchCreateRequestChangeRequest
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	_, err := q.exec(ctx, nil, query, queryParams...)
	return err
}

const batchDeleteOpenRequestChangeRequest = `-- name: BatchDeleteOpenRequestChangeRequest :exec
DELETE FROM open_request_change_requests WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) BatchDeleteOpenRequestChangeRequest(ctx context.Context, ids []int64) error {
	query := batchDeleteOpenRequestChangeRequest
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	_, err := q.exec(ctx, nil, query, queryParams...)
	return err
}

const countOpenRequestChangeRequestsForRequest = `-- name: CountOpenRequestChangeRequestsForRequest :one
SELECT
  COUNT(*)
FROM
  request_fields
JOIN
  open_request_change_requests ON open_request_change_requests.rfid = request_fields.id
WHERE
  request_fields.rid = ?
`

func (q *Queries) CountOpenRequestChangeRequestsForRequest(ctx context.Context, rid int64) (int64, error) {
	row := q.queryRow(ctx, q.countOpenRequestChangeRequestsForRequestStmt, countOpenRequestChangeRequestsForRequest, rid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createOpenRequestChangeRequest = `-- name: CreateOpenRequestChangeRequest :exec
INSERT INTO open_request_change_requests (value, text, rfid, pid) VALUES (?, ?, ?, ?)
`

type CreateOpenRequestChangeRequestParams struct {
	Value string
	Text  string
	RFID  int64
	PID   int64
}

func (q *Queries) CreateOpenRequestChangeRequest(ctx context.Context, arg CreateOpenRequestChangeRequestParams) error {
	_, err := q.exec(ctx, q.createOpenRequestChangeRequestStmt, createOpenRequestChangeRequest,
		arg.Value,
		arg.Text,
		arg.RFID,
		arg.PID,
	)
	return err
}

const createPastRequestChangeRequest = `-- name: CreatePastRequestChangeRequest :exec
INSERT INTO
  past_request_change_requests
SELECT created_at, updated_at, value, text, rfid, pid, id FROM
  request_change_requests
WHERE
  request_change_requests.id = ?
`

func (q *Queries) CreatePastRequestChangeRequest(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.createPastRequestChangeRequestStmt, createPastRequestChangeRequest, id)
	return err
}

const createRequest = `-- name: CreateRequest :execresult
INSERT INTO requests (type, status, pid) VALUES (?, ?, ?)
`

type CreateRequestParams struct {
	Type   string
	Status string
	PID    int64
}

func (q *Queries) CreateRequest(ctx context.Context, arg CreateRequestParams) (sql.Result, error) {
	return q.exec(ctx, q.createRequestStmt, createRequest, arg.Type, arg.Status, arg.PID)
}

const createRequestChangeRequest = `-- name: CreateRequestChangeRequest :exec
INSERT INTO
  request_change_requests
SELECT created_at, updated_at, value, text, rfid, pid, id FROM
  open_request_change_requests
WHERE
  open_request_change_requests.id = ?
`

func (q *Queries) CreateRequestChangeRequest(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.createRequestChangeRequestStmt, createRequestChangeRequest, id)
	return err
}

const createRequestField = `-- name: CreateRequestField :exec
INSERT INTO request_fields (value, type, status, rid) VALUES (?, ?, ?, ?)
`

type CreateRequestFieldParams struct {
	Value  string
	Type   string
	Status string
	RID    int64
}

func (q *Queries) CreateRequestField(ctx context.Context, arg CreateRequestFieldParams) error {
	_, err := q.exec(ctx, q.createRequestFieldStmt, createRequestField,
		arg.Value,
		arg.Type,
		arg.Status,
		arg.RID,
	)
	return err
}

const deleteOpenRequestChangeRequest = `-- name: DeleteOpenRequestChangeRequest :exec
DELETE FROM open_request_change_requests WHERE id = ?
`

func (q *Queries) DeleteOpenRequestChangeRequest(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteOpenRequestChangeRequestStmt, deleteOpenRequestChangeRequest, id)
	return err
}

const deleteRequestChangeRequest = `-- name: DeleteRequestChangeRequest :exec
DELETE FROM request_change_requests WHERE id = ?
`

func (q *Queries) DeleteRequestChangeRequest(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteRequestChangeRequestStmt, deleteRequestChangeRequest, id)
	return err
}

const editOpenRequestChangeRequest = `-- name: EditOpenRequestChangeRequest :exec
UPDATE open_request_change_requests SET text = ? WHERE id = ?
`

type EditOpenRequestChangeRequestParams struct {
	Text string
	ID   int64
}

func (q *Queries) EditOpenRequestChangeRequest(ctx context.Context, arg EditOpenRequestChangeRequestParams) error {
	_, err := q.exec(ctx, q.editOpenRequestChangeRequestStmt, editOpenRequestChangeRequest, arg.Text, arg.ID)
	return err
}

const getOpenRequestChangeRequest = `-- name: GetOpenRequestChangeRequest :one
SELECT created_at, updated_at, value, text, rfid, pid, id FROM open_request_change_requests WHERE id = ?
`

func (q *Queries) GetOpenRequestChangeRequest(ctx context.Context, id int64) (OpenRequestChangeRequest, error) {
	row := q.queryRow(ctx, q.getOpenRequestChangeRequestStmt, getOpenRequestChangeRequest, id)
	var i OpenRequestChangeRequest
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Value,
		&i.Text,
		&i.RFID,
		&i.PID,
		&i.ID,
	)
	return i, err
}

const getOpenRequestChangeRequestForRequestField = `-- name: GetOpenRequestChangeRequestForRequestField :one
SELECT created_at, updated_at, value, text, rfid, pid, id FROM open_request_change_requests WHERE rfid = ?
`

func (q *Queries) GetOpenRequestChangeRequestForRequestField(ctx context.Context, rfid int64) (OpenRequestChangeRequest, error) {
	row := q.queryRow(ctx, q.getOpenRequestChangeRequestForRequestFieldStmt, getOpenRequestChangeRequestForRequestField, rfid)
	var i OpenRequestChangeRequest
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Value,
		&i.Text,
		&i.RFID,
		&i.PID,
		&i.ID,
	)
	return i, err
}

const getRequest = `-- name: GetRequest :one
SELECT created_at, updated_at, type, status, rpid, pid, id FROM requests WHERE id = ?
`

func (q *Queries) GetRequest(ctx context.Context, id int64) (Request, error) {
	row := q.queryRow(ctx, q.getRequestStmt, getRequest, id)
	var i Request
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Type,
		&i.Status,
		&i.RPID,
		&i.PID,
		&i.ID,
	)
	return i, err
}

const getRequestField = `-- name: GetRequestField :one
SELECT created_at, updated_at, value, type, status, rid, id FROM request_fields WHERE id = ?
`

func (q *Queries) GetRequestField(ctx context.Context, id int64) (RequestField, error) {
	row := q.queryRow(ctx, q.getRequestFieldStmt, getRequestField, id)
	var i RequestField
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Value,
		&i.Type,
		&i.Status,
		&i.RID,
		&i.ID,
	)
	return i, err
}

const getRequestFieldByType = `-- name: GetRequestFieldByType :one
SELECT created_at, updated_at, value, type, status, rid, id FROM request_fields WHERE type = ? AND rid = ?
`

type GetRequestFieldByTypeParams struct {
	Type string
	RID  int64
}

func (q *Queries) GetRequestFieldByType(ctx context.Context, arg GetRequestFieldByTypeParams) (RequestField, error) {
	row := q.queryRow(ctx, q.getRequestFieldByTypeStmt, getRequestFieldByType, arg.Type, arg.RID)
	var i RequestField
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Value,
		&i.Type,
		&i.Status,
		&i.RID,
		&i.ID,
	)
	return i, err
}

const getRequestFieldByTypeWithChangeRequests = `-- name: GetRequestFieldByTypeWithChangeRequests :one
SELECT
  request_fields.created_at, request_fields.updated_at, request_fields.value, request_fields.type, request_fields.status, request_fields.rid, request_fields.id, open_request_change_requests.created_at, open_request_change_requests.updated_at, open_request_change_requests.value, open_request_change_requests.text, open_request_change_requests.rfid, open_request_change_requests.pid, open_request_change_requests.id, request_change_requests.created_at, request_change_requests.updated_at, request_change_requests.value, request_change_requests.text, request_change_requests.rfid, request_change_requests.pid, request_change_requests.id
FROM
  request_fields
LEFT JOIN
  open_request_change_requests ON open_request_change_requests.rfid = request_fields.id
LEFT JOIN
  request_change_requests ON request_change_requests.rfid = request_fields.id
WHERE
  request_fields.type = ? AND request_fields.rid = ?
`

type GetRequestFieldByTypeWithChangeRequestsParams struct {
	Type string
	RID  int64
}

type GetRequestFieldByTypeWithChangeRequestsRow struct {
	RequestField             RequestField
	OpenRequestChangeRequest OpenRequestChangeRequest
	RequestChangeRequest     RequestChangeRequest
}

func (q *Queries) GetRequestFieldByTypeWithChangeRequests(ctx context.Context, arg GetRequestFieldByTypeWithChangeRequestsParams) (GetRequestFieldByTypeWithChangeRequestsRow, error) {
	row := q.queryRow(ctx, q.getRequestFieldByTypeWithChangeRequestsStmt, getRequestFieldByTypeWithChangeRequests, arg.Type, arg.RID)
	var i GetRequestFieldByTypeWithChangeRequestsRow
	err := row.Scan(
		&i.RequestField.CreatedAt,
		&i.RequestField.UpdatedAt,
		&i.RequestField.Value,
		&i.RequestField.Type,
		&i.RequestField.Status,
		&i.RequestField.RID,
		&i.RequestField.ID,
		&i.OpenRequestChangeRequest.CreatedAt,
		&i.OpenRequestChangeRequest.UpdatedAt,
		&i.OpenRequestChangeRequest.Value,
		&i.OpenRequestChangeRequest.Text,
		&i.OpenRequestChangeRequest.RFID,
		&i.OpenRequestChangeRequest.PID,
		&i.OpenRequestChangeRequest.ID,
		&i.RequestChangeRequest.CreatedAt,
		&i.RequestChangeRequest.UpdatedAt,
		&i.RequestChangeRequest.Value,
		&i.RequestChangeRequest.Text,
		&i.RequestChangeRequest.RFID,
		&i.RequestChangeRequest.PID,
		&i.RequestChangeRequest.ID,
	)
	return i, err
}

const listOpenRequestChangeRequestsByFieldID = `-- name: ListOpenRequestChangeRequestsByFieldID :many
SELECT created_at, updated_at, value, text, rfid, pid, id FROM open_request_change_requests WHERE rfid IN (/*SLICE:rfids*/?)
`

func (q *Queries) ListOpenRequestChangeRequestsByFieldID(ctx context.Context, rfids []int64) ([]OpenRequestChangeRequest, error) {
	query := listOpenRequestChangeRequestsByFieldID
	var queryParams []interface{}
	if len(rfids) > 0 {
		for _, v := range rfids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:rfids*/?", strings.Repeat(",?", len(rfids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:rfids*/?", "NULL", 1)
	}
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OpenRequestChangeRequest
	for rows.Next() {
		var i OpenRequestChangeRequest
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Value,
			&i.Text,
			&i.RFID,
			&i.PID,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOpenRequestChangeRequestsForRequest = `-- name: ListOpenRequestChangeRequestsForRequest :many
SELECT
  open_request_change_requests.created_at, open_request_change_requests.updated_at, open_request_change_requests.value, open_request_change_requests.text, open_request_change_requests.rfid, open_request_change_requests.pid, open_request_change_requests.id
FROM
  request_fields
JOIN
  open_request_change_requests ON open_request_change_requests.rfid = request_fields.id
WHERE
  request_fields.rid = ?
`

func (q *Queries) ListOpenRequestChangeRequestsForRequest(ctx context.Context, rid int64) ([]OpenRequestChangeRequest, error) {
	rows, err := q.query(ctx, q.listOpenRequestChangeRequestsForRequestStmt, listOpenRequestChangeRequestsForRequest, rid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OpenRequestChangeRequest
	for rows.Next() {
		var i OpenRequestChangeRequest
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Value,
			&i.Text,
			&i.RFID,
			&i.PID,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRequestChangeRequestsByFieldID = `-- name: ListRequestChangeRequestsByFieldID :many
SELECT created_at, updated_at, value, text, rfid, pid, id FROM request_change_requests WHERE rfid IN (/*SLICE:rfids*/?)
`

func (q *Queries) ListRequestChangeRequestsByFieldID(ctx context.Context, rfids []int64) ([]RequestChangeRequest, error) {
	query := listRequestChangeRequestsByFieldID
	var queryParams []interface{}
	if len(rfids) > 0 {
		for _, v := range rfids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:rfids*/?", strings.Repeat(",?", len(rfids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:rfids*/?", "NULL", 1)
	}
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RequestChangeRequest
	for rows.Next() {
		var i RequestChangeRequest
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Value,
			&i.Text,
			&i.RFID,
			&i.PID,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRequestFieldsForRequest = `-- name: ListRequestFieldsForRequest :many
SELECT created_at, updated_at, value, type, status, rid, id FROM request_fields WHERE rid = ?
`

func (q *Queries) ListRequestFieldsForRequest(ctx context.Context, rid int64) ([]RequestField, error) {
	rows, err := q.query(ctx, q.listRequestFieldsForRequestStmt, listRequestFieldsForRequest, rid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RequestField
	for rows.Next() {
		var i RequestField
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Value,
			&i.Type,
			&i.Status,
			&i.RID,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRequestFieldsForRequestWithChangeRequests = `-- name: ListRequestFieldsForRequestWithChangeRequests :many
SELECT
  request_fields.created_at, request_fields.updated_at, request_fields.value, request_fields.type, request_fields.status, request_fields.rid, request_fields.id, open_request_change_requests.created_at, open_request_change_requests.updated_at, open_request_change_requests.value, open_request_change_requests.text, open_request_change_requests.rfid, open_request_change_requests.pid, open_request_change_requests.id, request_change_requests.created_at, request_change_requests.updated_at, request_change_requests.value, request_change_requests.text, request_change_requests.rfid, request_change_requests.pid, request_change_requests.id
FROM
  request_fields
LEFT JOIN
  open_request_change_requests ON open_request_change_requests.rfid = request_fields.id
LEFT JOIN
  request_change_requests ON request_change_requests.rfid = request_fields.id
WHERE
  request_fields.rid = ?
`

type ListRequestFieldsForRequestWithChangeRequestsRow struct {
	RequestField             RequestField
	OpenRequestChangeRequest OpenRequestChangeRequest
	RequestChangeRequest     RequestChangeRequest
}

func (q *Queries) ListRequestFieldsForRequestWithChangeRequests(ctx context.Context, rid int64) ([]ListRequestFieldsForRequestWithChangeRequestsRow, error) {
	rows, err := q.query(ctx, q.listRequestFieldsForRequestWithChangeRequestsStmt, listRequestFieldsForRequestWithChangeRequests, rid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRequestFieldsForRequestWithChangeRequestsRow
	for rows.Next() {
		var i ListRequestFieldsForRequestWithChangeRequestsRow
		if err := rows.Scan(
			&i.RequestField.CreatedAt,
			&i.RequestField.UpdatedAt,
			&i.RequestField.Value,
			&i.RequestField.Type,
			&i.RequestField.Status,
			&i.RequestField.RID,
			&i.RequestField.ID,
			&i.OpenRequestChangeRequest.CreatedAt,
			&i.OpenRequestChangeRequest.UpdatedAt,
			&i.OpenRequestChangeRequest.Value,
			&i.OpenRequestChangeRequest.Text,
			&i.OpenRequestChangeRequest.RFID,
			&i.OpenRequestChangeRequest.PID,
			&i.OpenRequestChangeRequest.ID,
			&i.RequestChangeRequest.CreatedAt,
			&i.RequestChangeRequest.UpdatedAt,
			&i.RequestChangeRequest.Value,
			&i.RequestChangeRequest.Text,
			&i.RequestChangeRequest.RFID,
			&i.RequestChangeRequest.PID,
			&i.RequestChangeRequest.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRequestsByTypeAndStatus = `-- name: ListRequestsByTypeAndStatus :many
SELECT created_at, updated_at, type, status, rpid, pid, id FROM requests WHERE type = ? AND status IN (/*SLICE:statuses*/?)
`

type ListRequestsByTypeAndStatusParams struct {
	Type     string
	Statuses []string
}

func (q *Queries) ListRequestsByTypeAndStatus(ctx context.Context, arg ListRequestsByTypeAndStatusParams) ([]Request, error) {
	query := listRequestsByTypeAndStatus
	var queryParams []interface{}
	queryParams = append(queryParams, arg.Type)
	if len(arg.Statuses) > 0 {
		for _, v := range arg.Statuses {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:statuses*/?", strings.Repeat(",?", len(arg.Statuses))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:statuses*/?", "NULL", 1)
	}
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Request
	for rows.Next() {
		var i Request
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Type,
			&i.Status,
			&i.RPID,
			&i.PID,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRequestsForPlayer = `-- name: ListRequestsForPlayer :many
SELECT created_at, updated_at, type, status, rpid, pid, id FROM requests WHERE pid = ?
`

func (q *Queries) ListRequestsForPlayer(ctx context.Context, pid int64) ([]Request, error) {
	rows, err := q.query(ctx, q.listRequestsForPlayerStmt, listRequestsForPlayer, pid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Request
	for rows.Next() {
		var i Request
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Type,
			&i.Status,
			&i.RPID,
			&i.PID,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRequestFieldStatus = `-- name: UpdateRequestFieldStatus :exec
UPDATE request_fields SET status = ? WHERE id = ?
`

type UpdateRequestFieldStatusParams struct {
	Status string
	ID     int64
}

func (q *Queries) UpdateRequestFieldStatus(ctx context.Context, arg UpdateRequestFieldStatusParams) error {
	_, err := q.exec(ctx, q.updateRequestFieldStatusStmt, updateRequestFieldStatus, arg.Status, arg.ID)
	return err
}

const updateRequestFieldStatusByRequestAndType = `-- name: UpdateRequestFieldStatusByRequestAndType :exec
UPDATE request_fields SET status = ? WHERE type = ? AND rid = ?
`

type UpdateRequestFieldStatusByRequestAndTypeParams struct {
	Status string
	Type   string
	RID    int64
}

func (q *Queries) UpdateRequestFieldStatusByRequestAndType(ctx context.Context, arg UpdateRequestFieldStatusByRequestAndTypeParams) error {
	_, err := q.exec(ctx, q.updateRequestFieldStatusByRequestAndTypeStmt, updateRequestFieldStatusByRequestAndType, arg.Status, arg.Type, arg.RID)
	return err
}

const updateRequestFieldValue = `-- name: UpdateRequestFieldValue :exec
UPDATE request_fields SET value = ? WHERE id = ?
`

type UpdateRequestFieldValueParams struct {
	Value string
	ID    int64
}

func (q *Queries) UpdateRequestFieldValue(ctx context.Context, arg UpdateRequestFieldValueParams) error {
	_, err := q.exec(ctx, q.updateRequestFieldValueStmt, updateRequestFieldValue, arg.Value, arg.ID)
	return err
}

const updateRequestFieldValueByRequestAndType = `-- name: UpdateRequestFieldValueByRequestAndType :exec
UPDATE request_fields SET value = ? WHERE type = ? AND rid = ?
`

type UpdateRequestFieldValueByRequestAndTypeParams struct {
	Value string
	Type  string
	RID   int64
}

func (q *Queries) UpdateRequestFieldValueByRequestAndType(ctx context.Context, arg UpdateRequestFieldValueByRequestAndTypeParams) error {
	_, err := q.exec(ctx, q.updateRequestFieldValueByRequestAndTypeStmt, updateRequestFieldValueByRequestAndType, arg.Value, arg.Type, arg.RID)
	return err
}

const updateRequestReviewer = `-- name: UpdateRequestReviewer :exec
UPDATE requests SET rpid = ? WHERE id = ?
`

type UpdateRequestReviewerParams struct {
	RPID int64
	ID   int64
}

func (q *Queries) UpdateRequestReviewer(ctx context.Context, arg UpdateRequestReviewerParams) error {
	_, err := q.exec(ctx, q.updateRequestReviewerStmt, updateRequestReviewer, arg.RPID, arg.ID)
	return err
}

const updateRequestStatus = `-- name: UpdateRequestStatus :exec
UPDATE requests SET status = ? WHERE id = ?
`

type UpdateRequestStatusParams struct {
	Status string
	ID     int64
}

func (q *Queries) UpdateRequestStatus(ctx context.Context, arg UpdateRequestStatusParams) error {
	_, err := q.exec(ctx, q.updateRequestStatusStmt, updateRequestStatus, arg.Status, arg.ID)
	return err
}
