// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: room.sql

package queries

import (
	"context"
	"database/sql"
)

const createRoom = `-- name: CreateRoom :execresult
INSERT INTO rooms (riid) VALUES (?)
`

func (q *Queries) CreateRoom(ctx context.Context, riid int64) (sql.Result, error) {
	return q.exec(ctx, q.createRoomStmt, createRoom, riid)
}

const createRoomImage = `-- name: CreateRoomImage :execresult
INSERT INTO room_images (name, title, description, size) VALUES (?, ?, ?, ?)
`

type CreateRoomImageParams struct {
	Name        string
	Title       string
	Description string
	Size        int32
}

func (q *Queries) CreateRoomImage(ctx context.Context, arg CreateRoomImageParams) (sql.Result, error) {
	return q.exec(ctx, q.createRoomImageStmt, createRoomImage,
		arg.Name,
		arg.Title,
		arg.Description,
		arg.Size,
	)
}

const getRoom = `-- name: GetRoom :one
SELECT created_at, updated_at, north, northeast, east, southeast, south, southwest, west, northwest, riid, id FROM rooms WHERE id = ?
`

func (q *Queries) GetRoom(ctx context.Context, id int64) (Room, error) {
	row := q.queryRow(ctx, q.getRoomStmt, getRoom, id)
	var i Room
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.North,
		&i.Northeast,
		&i.East,
		&i.Southeast,
		&i.South,
		&i.Southwest,
		&i.West,
		&i.Northwest,
		&i.RIID,
		&i.ID,
	)
	return i, err
}

const getRoomByImageId = `-- name: GetRoomByImageId :one
SELECT created_at, updated_at, north, northeast, east, southeast, south, southwest, west, northwest, riid, id FROM rooms WHERE riid = ?
`

func (q *Queries) GetRoomByImageId(ctx context.Context, riid int64) (Room, error) {
	row := q.queryRow(ctx, q.getRoomByImageIdStmt, getRoomByImageId, riid)
	var i Room
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.North,
		&i.Northeast,
		&i.East,
		&i.Southeast,
		&i.South,
		&i.Southwest,
		&i.West,
		&i.Northwest,
		&i.RIID,
		&i.ID,
	)
	return i, err
}

const getRoomImage = `-- name: GetRoomImage :one
SELECT created_at, updated_at, description, title, name, id, size FROM room_images WHERE id = ?
`

func (q *Queries) GetRoomImage(ctx context.Context, id int64) (RoomImage, error) {
	row := q.queryRow(ctx, q.getRoomImageStmt, getRoomImage, id)
	var i RoomImage
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Title,
		&i.Name,
		&i.ID,
		&i.Size,
	)
	return i, err
}

const getRoomImageByName = `-- name: GetRoomImageByName :one
SELECT created_at, updated_at, description, title, name, id, size FROM room_images WHERE name = ?
`

func (q *Queries) GetRoomImageByName(ctx context.Context, name string) (RoomImage, error) {
	row := q.queryRow(ctx, q.getRoomImageByNameStmt, getRoomImageByName, name)
	var i RoomImage
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Title,
		&i.Name,
		&i.ID,
		&i.Size,
	)
	return i, err
}

const listRoomImages = `-- name: ListRoomImages :many
SELECT created_at, updated_at, description, title, name, id, size FROM room_images
`

func (q *Queries) ListRoomImages(ctx context.Context) ([]RoomImage, error) {
	rows, err := q.query(ctx, q.listRoomImagesStmt, listRoomImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoomImage
	for rows.Next() {
		var i RoomImage
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.Title,
			&i.Name,
			&i.ID,
			&i.Size,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRooms = `-- name: ListRooms :many
SELECT created_at, updated_at, north, northeast, east, southeast, south, southwest, west, northwest, riid, id FROM rooms
`

func (q *Queries) ListRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.query(ctx, q.listRoomsStmt, listRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.North,
			&i.Northeast,
			&i.East,
			&i.Southeast,
			&i.South,
			&i.Southwest,
			&i.West,
			&i.Northwest,
			&i.RIID,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoomsWithImage = `-- name: ListRoomsWithImage :many
SELECT
  room_images.created_at, room_images.updated_at, room_images.description, room_images.title, room_images.name, room_images.id, room_images.size, rooms.created_at, rooms.updated_at, rooms.north, rooms.northeast, rooms.east, rooms.southeast, rooms.south, rooms.southwest, rooms.west, rooms.northwest, rooms.riid, rooms.id
FROM
  rooms
JOIN
  room_images
ON
  rooms.riid = room_images.id
`

type ListRoomsWithImageRow struct {
	RoomImage RoomImage
	Room      Room
}

func (q *Queries) ListRoomsWithImage(ctx context.Context) ([]ListRoomsWithImageRow, error) {
	rows, err := q.query(ctx, q.listRoomsWithImageStmt, listRoomsWithImage)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRoomsWithImageRow
	for rows.Next() {
		var i ListRoomsWithImageRow
		if err := rows.Scan(
			&i.RoomImage.CreatedAt,
			&i.RoomImage.UpdatedAt,
			&i.RoomImage.Description,
			&i.RoomImage.Title,
			&i.RoomImage.Name,
			&i.RoomImage.ID,
			&i.RoomImage.Size,
			&i.Room.CreatedAt,
			&i.Room.UpdatedAt,
			&i.Room.North,
			&i.Room.Northeast,
			&i.Room.East,
			&i.Room.Southeast,
			&i.Room.South,
			&i.Room.Southwest,
			&i.Room.West,
			&i.Room.Northwest,
			&i.Room.RIID,
			&i.Room.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoomExitEast = `-- name: UpdateRoomExitEast :exec
UPDATE rooms SET east = ? WHERE id = ?
`

type UpdateRoomExitEastParams struct {
	East int64
	ID   int64
}

func (q *Queries) UpdateRoomExitEast(ctx context.Context, arg UpdateRoomExitEastParams) error {
	_, err := q.exec(ctx, q.updateRoomExitEastStmt, updateRoomExitEast, arg.East, arg.ID)
	return err
}

const updateRoomExitNorth = `-- name: UpdateRoomExitNorth :exec
UPDATE rooms SET north = ? WHERE id = ?
`

type UpdateRoomExitNorthParams struct {
	North int64
	ID    int64
}

func (q *Queries) UpdateRoomExitNorth(ctx context.Context, arg UpdateRoomExitNorthParams) error {
	_, err := q.exec(ctx, q.updateRoomExitNorthStmt, updateRoomExitNorth, arg.North, arg.ID)
	return err
}

const updateRoomExitNortheast = `-- name: UpdateRoomExitNortheast :exec
UPDATE rooms SET northeast = ? WHERE id = ?
`

type UpdateRoomExitNortheastParams struct {
	Northeast int64
	ID        int64
}

func (q *Queries) UpdateRoomExitNortheast(ctx context.Context, arg UpdateRoomExitNortheastParams) error {
	_, err := q.exec(ctx, q.updateRoomExitNortheastStmt, updateRoomExitNortheast, arg.Northeast, arg.ID)
	return err
}

const updateRoomExitNorthwest = `-- name: UpdateRoomExitNorthwest :exec
UPDATE rooms SET northwest = ? WHERE id = ?
`

type UpdateRoomExitNorthwestParams struct {
	Northwest int64
	ID        int64
}

func (q *Queries) UpdateRoomExitNorthwest(ctx context.Context, arg UpdateRoomExitNorthwestParams) error {
	_, err := q.exec(ctx, q.updateRoomExitNorthwestStmt, updateRoomExitNorthwest, arg.Northwest, arg.ID)
	return err
}

const updateRoomExitSouth = `-- name: UpdateRoomExitSouth :exec
UPDATE rooms SET south = ? WHERE id = ?
`

type UpdateRoomExitSouthParams struct {
	South int64
	ID    int64
}

func (q *Queries) UpdateRoomExitSouth(ctx context.Context, arg UpdateRoomExitSouthParams) error {
	_, err := q.exec(ctx, q.updateRoomExitSouthStmt, updateRoomExitSouth, arg.South, arg.ID)
	return err
}

const updateRoomExitSoutheast = `-- name: UpdateRoomExitSoutheast :exec
UPDATE rooms SET southeast = ? WHERE id = ?
`

type UpdateRoomExitSoutheastParams struct {
	Southeast int64
	ID        int64
}

func (q *Queries) UpdateRoomExitSoutheast(ctx context.Context, arg UpdateRoomExitSoutheastParams) error {
	_, err := q.exec(ctx, q.updateRoomExitSoutheastStmt, updateRoomExitSoutheast, arg.Southeast, arg.ID)
	return err
}

const updateRoomExitSouthwest = `-- name: UpdateRoomExitSouthwest :exec
UPDATE rooms SET southwest = ? WHERE id = ?
`

type UpdateRoomExitSouthwestParams struct {
	Southwest int64
	ID        int64
}

func (q *Queries) UpdateRoomExitSouthwest(ctx context.Context, arg UpdateRoomExitSouthwestParams) error {
	_, err := q.exec(ctx, q.updateRoomExitSouthwestStmt, updateRoomExitSouthwest, arg.Southwest, arg.ID)
	return err
}

const updateRoomExitWest = `-- name: UpdateRoomExitWest :exec
UPDATE rooms SET west = ? WHERE id = ?
`

type UpdateRoomExitWestParams struct {
	West int64
	ID   int64
}

func (q *Queries) UpdateRoomExitWest(ctx context.Context, arg UpdateRoomExitWestParams) error {
	_, err := q.exec(ctx, q.updateRoomExitWestStmt, updateRoomExitWest, arg.West, arg.ID)
	return err
}

const updateRoomImage = `-- name: UpdateRoomImage :exec
UPDATE
  room_images
SET
  name = ?,
  title = ?,
  description = ?,
  size = ?
WHERE
  id = ?
`

type UpdateRoomImageParams struct {
	Name        string
	Title       string
	Description string
	Size        int32
	ID          int64
}

func (q *Queries) UpdateRoomImage(ctx context.Context, arg UpdateRoomImageParams) error {
	_, err := q.exec(ctx, q.updateRoomImageStmt, updateRoomImage,
		arg.Name,
		arg.Title,
		arg.Description,
		arg.Size,
		arg.ID,
	)
	return err
}

const updateRoomImageDescription = `-- name: UpdateRoomImageDescription :exec
UPDATE room_images SET description = ? WHERE id = ?
`

type UpdateRoomImageDescriptionParams struct {
	Description string
	ID          int64
}

func (q *Queries) UpdateRoomImageDescription(ctx context.Context, arg UpdateRoomImageDescriptionParams) error {
	_, err := q.exec(ctx, q.updateRoomImageDescriptionStmt, updateRoomImageDescription, arg.Description, arg.ID)
	return err
}

const updateRoomImageName = `-- name: UpdateRoomImageName :exec
UPDATE room_images SET name = ? WHERE id = ?
`

type UpdateRoomImageNameParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateRoomImageName(ctx context.Context, arg UpdateRoomImageNameParams) error {
	_, err := q.exec(ctx, q.updateRoomImageNameStmt, updateRoomImageName, arg.Name, arg.ID)
	return err
}

const updateRoomImageSize = `-- name: UpdateRoomImageSize :exec
UPDATE room_images SET size = ? WHERE id = ?
`

type UpdateRoomImageSizeParams struct {
	Size int32
	ID   int64
}

func (q *Queries) UpdateRoomImageSize(ctx context.Context, arg UpdateRoomImageSizeParams) error {
	_, err := q.exec(ctx, q.updateRoomImageSizeStmt, updateRoomImageSize, arg.Size, arg.ID)
	return err
}

const updateRoomImageTitle = `-- name: UpdateRoomImageTitle :exec
UPDATE room_images SET title = ? WHERE id = ?
`

type UpdateRoomImageTitleParams struct {
	Title string
	ID    int64
}

func (q *Queries) UpdateRoomImageTitle(ctx context.Context, arg UpdateRoomImageTitleParams) error {
	_, err := q.exec(ctx, q.updateRoomImageTitleStmt, updateRoomImageTitle, arg.Title, arg.ID)
	return err
}
