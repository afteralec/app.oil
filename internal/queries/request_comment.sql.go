// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: request_comment.sql

package queries

import (
	"context"
	"database/sql"
)

const createRequestComment = `-- name: CreateRequestComment :execresult
INSERT INTO
  request_comments (text, field, pid, rid, vid) 
VALUES
  (?, ?, ?, ?, (SELECT vid FROM requests WHERE requests.id = rid))
`

type CreateRequestCommentParams struct {
	Text  string
	Field string
	PID   int64
	RID   int64
}

func (q *Queries) CreateRequestComment(ctx context.Context, arg CreateRequestCommentParams) (sql.Result, error) {
	return q.exec(ctx, q.createRequestCommentStmt, createRequestComment,
		arg.Text,
		arg.Field,
		arg.PID,
		arg.RID,
	)
}

const listCommentsForRequest = `-- name: ListCommentsForRequest :many
SELECT created_at, updated_at, deleted_at, text, field, rid, pid, cid, id, vid, deleted FROM request_comments WHERE rid = ?
`

func (q *Queries) ListCommentsForRequest(ctx context.Context, rid int64) ([]RequestComment, error) {
	rows, err := q.query(ctx, q.listCommentsForRequestStmt, listCommentsForRequest, rid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RequestComment
	for rows.Next() {
		var i RequestComment
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Text,
			&i.Field,
			&i.RID,
			&i.PID,
			&i.CID,
			&i.ID,
			&i.VID,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
