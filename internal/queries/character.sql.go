// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: character.sql

package queries

import (
	"context"
	"database/sql"
)

const createCharacterApplicationContent = `-- name: CreateCharacterApplicationContent :execresult
INSERT INTO
  character_application_content 
  (gender, name, sdesc, description, backstory, rid) 
VALUES 
  (?, ?, ?, ?, ?, ?)
`

type CreateCharacterApplicationContentParams struct {
	Gender      string
	Name        string
	Sdesc       string
	Description string
	Backstory   string
	Rid         int64
}

func (q *Queries) CreateCharacterApplicationContent(ctx context.Context, arg CreateCharacterApplicationContentParams) (sql.Result, error) {
	return q.exec(ctx, q.createCharacterApplicationContentStmt, createCharacterApplicationContent,
		arg.Gender,
		arg.Name,
		arg.Sdesc,
		arg.Description,
		arg.Backstory,
		arg.Rid,
	)
}

const createCharacterApplicationContentHistory = `-- name: CreateCharacterApplicationContentHistory :execresult
INSERT INTO
  character_application_content_history
  (gender, name, sdesc, description, backstory, vid, rid)
VALUES
  (?, ?, ?, ?, ?, ?, ?)
`

type CreateCharacterApplicationContentHistoryParams struct {
	Gender      string
	Name        string
	Sdesc       string
	Description string
	Backstory   string
	Vid         int64
	Rid         int64
}

func (q *Queries) CreateCharacterApplicationContentHistory(ctx context.Context, arg CreateCharacterApplicationContentHistoryParams) (sql.Result, error) {
	return q.exec(ctx, q.createCharacterApplicationContentHistoryStmt, createCharacterApplicationContentHistory,
		arg.Gender,
		arg.Name,
		arg.Sdesc,
		arg.Description,
		arg.Backstory,
		arg.Vid,
		arg.Rid,
	)
}

const getCharacterApplicationContent = `-- name: GetCharacterApplicationContent :one
SELECT created_at, updated_at, backstory, description, sdesc, name, gender, vid, rid, id FROM character_application_content WHERE id = ?
`

func (q *Queries) GetCharacterApplicationContent(ctx context.Context, id int64) (CharacterApplicationContent, error) {
	row := q.queryRow(ctx, q.getCharacterApplicationContentStmt, getCharacterApplicationContent, id)
	var i CharacterApplicationContent
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Backstory,
		&i.Description,
		&i.Sdesc,
		&i.Name,
		&i.Gender,
		&i.Vid,
		&i.Rid,
		&i.ID,
	)
	return i, err
}

const getCharacterApplicationContentForRequest = `-- name: GetCharacterApplicationContentForRequest :one
SELECT created_at, updated_at, backstory, description, sdesc, name, gender, vid, rid, id FROM character_application_content WHERE rid = ?
`

func (q *Queries) GetCharacterApplicationContentForRequest(ctx context.Context, rid int64) (CharacterApplicationContent, error) {
	row := q.queryRow(ctx, q.getCharacterApplicationContentForRequestStmt, getCharacterApplicationContentForRequest, rid)
	var i CharacterApplicationContent
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Backstory,
		&i.Description,
		&i.Sdesc,
		&i.Name,
		&i.Gender,
		&i.Vid,
		&i.Rid,
		&i.ID,
	)
	return i, err
}

const updateCharacterApplicationContent = `-- name: UpdateCharacterApplicationContent :exec
UPDATE 
  character_application_content
SET 
  gender = ?,
  name = ?,
  sdesc = ?,
  description = ?,
  backstory = ?,
  vid = ?
WHERE
  rid = ?
`

type UpdateCharacterApplicationContentParams struct {
	Gender      string
	Name        string
	Sdesc       string
	Description string
	Backstory   string
	Vid         int64
	Rid         int64
}

func (q *Queries) UpdateCharacterApplicationContent(ctx context.Context, arg UpdateCharacterApplicationContentParams) error {
	_, err := q.exec(ctx, q.updateCharacterApplicationContentStmt, updateCharacterApplicationContent,
		arg.Gender,
		arg.Name,
		arg.Sdesc,
		arg.Description,
		arg.Backstory,
		arg.Vid,
		arg.Rid,
	)
	return err
}

const updateCharacterApplicationContentBackstory = `-- name: UpdateCharacterApplicationContentBackstory :exec
UPDATE character_application_content SET backstory = ? WHERE rid = ?
`

type UpdateCharacterApplicationContentBackstoryParams struct {
	Backstory string
	Rid       int64
}

func (q *Queries) UpdateCharacterApplicationContentBackstory(ctx context.Context, arg UpdateCharacterApplicationContentBackstoryParams) error {
	_, err := q.exec(ctx, q.updateCharacterApplicationContentBackstoryStmt, updateCharacterApplicationContentBackstory, arg.Backstory, arg.Rid)
	return err
}

const updateCharacterApplicationContentDescription = `-- name: UpdateCharacterApplicationContentDescription :exec
UPDATE character_application_content SET description = ? WHERE rid = ?
`

type UpdateCharacterApplicationContentDescriptionParams struct {
	Description string
	Rid         int64
}

func (q *Queries) UpdateCharacterApplicationContentDescription(ctx context.Context, arg UpdateCharacterApplicationContentDescriptionParams) error {
	_, err := q.exec(ctx, q.updateCharacterApplicationContentDescriptionStmt, updateCharacterApplicationContentDescription, arg.Description, arg.Rid)
	return err
}

const updateCharacterApplicationContentGender = `-- name: UpdateCharacterApplicationContentGender :exec
UPDATE character_application_content SET gender = ? WHERE rid = ?
`

type UpdateCharacterApplicationContentGenderParams struct {
	Gender string
	Rid    int64
}

func (q *Queries) UpdateCharacterApplicationContentGender(ctx context.Context, arg UpdateCharacterApplicationContentGenderParams) error {
	_, err := q.exec(ctx, q.updateCharacterApplicationContentGenderStmt, updateCharacterApplicationContentGender, arg.Gender, arg.Rid)
	return err
}

const updateCharacterApplicationContentName = `-- name: UpdateCharacterApplicationContentName :exec
UPDATE character_application_content SET name = ? WHERE rid = ?
`

type UpdateCharacterApplicationContentNameParams struct {
	Name string
	Rid  int64
}

func (q *Queries) UpdateCharacterApplicationContentName(ctx context.Context, arg UpdateCharacterApplicationContentNameParams) error {
	_, err := q.exec(ctx, q.updateCharacterApplicationContentNameStmt, updateCharacterApplicationContentName, arg.Name, arg.Rid)
	return err
}

const updateCharacterApplicationContentSdesc = `-- name: UpdateCharacterApplicationContentSdesc :exec
UPDATE character_application_content SET sdesc = ? WHERE rid = ?
`

type UpdateCharacterApplicationContentSdescParams struct {
	Sdesc string
	Rid   int64
}

func (q *Queries) UpdateCharacterApplicationContentSdesc(ctx context.Context, arg UpdateCharacterApplicationContentSdescParams) error {
	_, err := q.exec(ctx, q.updateCharacterApplicationContentSdescStmt, updateCharacterApplicationContentSdesc, arg.Sdesc, arg.Rid)
	return err
}

const updateCharacterApplicationContentVersion = `-- name: UpdateCharacterApplicationContentVersion :exec
UPDATE character_application_content SET vid = ? WHERE rid = ?
`

type UpdateCharacterApplicationContentVersionParams struct {
	Vid int64
	Rid int64
}

func (q *Queries) UpdateCharacterApplicationContentVersion(ctx context.Context, arg UpdateCharacterApplicationContentVersionParams) error {
	_, err := q.exec(ctx, q.updateCharacterApplicationContentVersionStmt, updateCharacterApplicationContentVersion, arg.Vid, arg.Rid)
	return err
}
