// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: character.sql

package queries

import (
	"context"
	"database/sql"
)

const createCharacterApplicationContent = `-- name: CreateCharacterApplicationContent :execresult
INSERT INTO
  character_application_content 
  (gender, name, sdesc, description, backstory, rid) 
VALUES 
  (?, ?, ?, ?, ?, ?)
`

type CreateCharacterApplicationContentParams struct {
	Gender      string
	Name        string
	Sdesc       string
	Description string
	Backstory   string
	Rid         int64
}

func (q *Queries) CreateCharacterApplicationContent(ctx context.Context, arg CreateCharacterApplicationContentParams) (sql.Result, error) {
	return q.exec(ctx, q.createCharacterApplicationContentStmt, createCharacterApplicationContent,
		arg.Gender,
		arg.Name,
		arg.Sdesc,
		arg.Description,
		arg.Backstory,
		arg.Rid,
	)
}

const createCharacterApplicationContentHistory = `-- name: CreateCharacterApplicationContentHistory :execresult
INSERT INTO
  character_application_content_history
  (gender, name, sdesc, description, backstory, vid, rid)
VALUES
  (?, ?, ?, ?, ?, ?, ?)
`

type CreateCharacterApplicationContentHistoryParams struct {
	Gender      string
	Name        string
	Sdesc       string
	Description string
	Backstory   string
	Vid         int64
	Rid         int64
}

func (q *Queries) CreateCharacterApplicationContentHistory(ctx context.Context, arg CreateCharacterApplicationContentHistoryParams) (sql.Result, error) {
	return q.exec(ctx, q.createCharacterApplicationContentHistoryStmt, createCharacterApplicationContentHistory,
		arg.Gender,
		arg.Name,
		arg.Sdesc,
		arg.Description,
		arg.Backstory,
		arg.Vid,
		arg.Rid,
	)
}

const getCharacterApplicationContent = `-- name: GetCharacterApplicationContent :one
SELECT created_at, updated_at, gender, name, sdesc, description, backstory, rid, id FROM character_application_content WHERE id = ?
`

func (q *Queries) GetCharacterApplicationContent(ctx context.Context, id int64) (CharacterApplicationContent, error) {
	row := q.queryRow(ctx, q.getCharacterApplicationContentStmt, getCharacterApplicationContent, id)
	var i CharacterApplicationContent
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Gender,
		&i.Name,
		&i.Sdesc,
		&i.Description,
		&i.Backstory,
		&i.Rid,
		&i.ID,
	)
	return i, err
}

const getCharacterApplicationContentForRequest = `-- name: GetCharacterApplicationContentForRequest :one
SELECT created_at, updated_at, gender, name, sdesc, description, backstory, rid, id FROM character_application_content WHERE rid = ?
`

func (q *Queries) GetCharacterApplicationContentForRequest(ctx context.Context, rid int64) (CharacterApplicationContent, error) {
	row := q.queryRow(ctx, q.getCharacterApplicationContentForRequestStmt, getCharacterApplicationContentForRequest, rid)
	var i CharacterApplicationContent
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Gender,
		&i.Name,
		&i.Sdesc,
		&i.Description,
		&i.Backstory,
		&i.Rid,
		&i.ID,
	)
	return i, err
}

const updateCharacterApplicationContent = `-- name: UpdateCharacterApplicationContent :execresult
UPDATE 
  character_application_content
SET 
  gender = ?,
  name = ?,
  sdesc = ?,
  description = ?,
  backstory = ?
WHERE
  id = ?
`

type UpdateCharacterApplicationContentParams struct {
	Gender      string
	Name        string
	Sdesc       string
	Description string
	Backstory   string
	ID          int64
}

func (q *Queries) UpdateCharacterApplicationContent(ctx context.Context, arg UpdateCharacterApplicationContentParams) (sql.Result, error) {
	return q.exec(ctx, q.updateCharacterApplicationContentStmt, updateCharacterApplicationContent,
		arg.Gender,
		arg.Name,
		arg.Sdesc,
		arg.Description,
		arg.Backstory,
		arg.ID,
	)
}
