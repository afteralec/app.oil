// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: player_permission.sql

package queries

import (
	"context"
	"database/sql"
)

const createPlayerPermission = `-- name: CreatePlayerPermission :execresult
INSERT INTO player_permissions (permission, pid, ipid) VALUES (?, ?, ?)
`

type CreatePlayerPermissionParams struct {
	Permission string
	PID        int64
	IPID       int64
}

func (q *Queries) CreatePlayerPermission(ctx context.Context, arg CreatePlayerPermissionParams) (sql.Result, error) {
	return q.exec(ctx, q.createPlayerPermissionStmt, createPlayerPermission, arg.Permission, arg.PID, arg.IPID)
}

const createPlayerPermissionIssuedChangeHistory = `-- name: CreatePlayerPermissionIssuedChangeHistory :exec
INSERT INTO player_permission_change_history (permission, pid, ipid) VALUES (?, ?, ?)
`

type CreatePlayerPermissionIssuedChangeHistoryParams struct {
	Permission string
	PID        int64
	IPID       int64
}

func (q *Queries) CreatePlayerPermissionIssuedChangeHistory(ctx context.Context, arg CreatePlayerPermissionIssuedChangeHistoryParams) error {
	_, err := q.exec(ctx, q.createPlayerPermissionIssuedChangeHistoryStmt, createPlayerPermissionIssuedChangeHistory, arg.Permission, arg.PID, arg.IPID)
	return err
}

const createPlayerPermissionRevokedChangeHistory = `-- name: CreatePlayerPermissionRevokedChangeHistory :exec
INSERT INTO player_permission_change_history (permission, pid, ipid, revoked) VALUES (?, ?, ?, true)
`

type CreatePlayerPermissionRevokedChangeHistoryParams struct {
	Permission string
	PID        int64
	IPID       int64
}

func (q *Queries) CreatePlayerPermissionRevokedChangeHistory(ctx context.Context, arg CreatePlayerPermissionRevokedChangeHistoryParams) error {
	_, err := q.exec(ctx, q.createPlayerPermissionRevokedChangeHistoryStmt, createPlayerPermissionRevokedChangeHistory, arg.Permission, arg.PID, arg.IPID)
	return err
}

const getPermissionForPlayer = `-- name: GetPermissionForPlayer :one
SELECT created_at, permission, ipid, pid, id FROM player_permissions WHERE permission = ? AND pid = ?
`

type GetPermissionForPlayerParams struct {
	Permission string
	PID        int64
}

func (q *Queries) GetPermissionForPlayer(ctx context.Context, arg GetPermissionForPlayerParams) (PlayerPermission, error) {
	row := q.queryRow(ctx, q.getPermissionForPlayerStmt, getPermissionForPlayer, arg.Permission, arg.PID)
	var i PlayerPermission
	err := row.Scan(
		&i.CreatedAt,
		&i.Permission,
		&i.IPID,
		&i.PID,
		&i.ID,
	)
	return i, err
}

const listPlayerPermissions = `-- name: ListPlayerPermissions :many
SELECT created_at, permission, ipid, pid, id FROM player_permissions WHERE pid = ?
`

func (q *Queries) ListPlayerPermissions(ctx context.Context, pid int64) ([]PlayerPermission, error) {
	rows, err := q.query(ctx, q.listPlayerPermissionsStmt, listPlayerPermissions, pid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlayerPermission
	for rows.Next() {
		var i PlayerPermission
		if err := rows.Scan(
			&i.CreatedAt,
			&i.Permission,
			&i.IPID,
			&i.PID,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
